from typing import Self
from pyautd3.driver.link import Link, LinkBuilder
from pyautd3.native_methods.autd3capi import ControllerPtr
from pyautd3.native_methods.autd3capi import NativeMethods as Base
from pyautd3.native_methods.autd3capi_driver import HandlePtr, LinkBuilderPtr, LinkPtr
from pyautd3.native_methods.autd3capi_link_twincat import NativeMethods as LinkTwinCAT
from pyautd3.native_methods.utils import _validate_ptr



class _TwinCATBuilder(LinkBuilder[TwinCAT]):
    def _resolve_link(self, handle: HandlePtr, ptr: ControllerPtr) -> TwinCAT: ...
    def _link_builder_ptr(self, ) -> LinkBuilderPtr: ...

class TwinCAT(Link):
    def __init__(self, handle: HandlePtr, ptr: LinkPtr) -> None: ...
    @staticmethod
    def builder() -> _TwinCATBuilder: ...

class _RemoteTwinCATBuilder(LinkBuilder[RemoteTwinCAT]):
    def __init__(self, server_ams_net_id: str) -> None: ...
    def _link_builder_ptr(self, ) -> LinkBuilderPtr: ...
    def _resolve_link(self, handle: HandlePtr, _ptr: ControllerPtr) -> RemoteTwinCAT: ...
    def with_server_ip(self, server_ip: str) -> _RemoteTwinCATBuilder: ...
    def with_client_ams_net_id(self, client_ams_net_id: str) -> _RemoteTwinCATBuilder: ...
    @property
    def server_ams_net_id(self) -> str: ...
    @property
    def server_ip(self) -> str: ...
    @property
    def client_ams_net_id(self) -> str: ...

class RemoteTwinCAT(Link):
    def __init__(self, handle: HandlePtr, ptr: LinkPtr) -> None: ...
    @staticmethod
    def builder(server_ams_net_id: str) -> _RemoteTwinCATBuilder: ...
