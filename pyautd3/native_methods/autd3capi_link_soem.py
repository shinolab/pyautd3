# This file is autogenerated
import threading
import ctypes
import os
from pyautd3.native_methods.autd3capi_def import LinkBuilderPtr, TimerStrategy

from enum import IntEnum

class SyncMode(IntEnum):
    FreeRun = 0
    DC = 1

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class LinkSOEMBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class LinkRemoteSOEMBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ResultLinkRemoteSOEMBuilder(ctypes.Structure):
    _fields_ = [("result", LinkRemoteSOEMBuilderPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_link_soem{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDAdapterPointer.argtypes = [] 
        self.dll.AUTDAdapterPointer.restype = ctypes.c_void_p

        self.dll.AUTDAdapterGetSize.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDAdapterGetSize.restype = ctypes.c_uint32

        self.dll.AUTDAdapterGetAdapter.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_char_p, ctypes.c_char_p] 
        self.dll.AUTDAdapterGetAdapter.restype = None

        self.dll.AUTDAdapterPointerDelete.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDAdapterPointerDelete.restype = None

        self.dll.AUTDLinkSOEM.argtypes = [] 
        self.dll.AUTDLinkSOEM.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithSendCycle.argtypes = [LinkSOEMBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkSOEMWithSendCycle.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithSync0Cycle.argtypes = [LinkSOEMBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkSOEMWithSync0Cycle.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithBufSize.argtypes = [LinkSOEMBuilderPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkSOEMWithBufSize.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithTimerStrategy.argtypes = [LinkSOEMBuilderPtr, TimerStrategy]  # type: ignore 
        self.dll.AUTDLinkSOEMWithTimerStrategy.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithSyncMode.argtypes = [LinkSOEMBuilderPtr, SyncMode]  # type: ignore 
        self.dll.AUTDLinkSOEMWithSyncMode.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithIfname.argtypes = [LinkSOEMBuilderPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkSOEMWithIfname.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithStateCheckInterval.argtypes = [LinkSOEMBuilderPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkSOEMWithStateCheckInterval.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithOnLost.argtypes = [LinkSOEMBuilderPtr, ctypes.c_void_p]  # type: ignore 
        self.dll.AUTDLinkSOEMWithOnLost.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithOnErr.argtypes = [LinkSOEMBuilderPtr, ctypes.c_void_p]  # type: ignore 
        self.dll.AUTDLinkSOEMWithOnErr.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMWithTimeout.argtypes = [LinkSOEMBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkSOEMWithTimeout.restype = LinkSOEMBuilderPtr

        self.dll.AUTDLinkSOEMIntoBuilder.argtypes = [LinkSOEMBuilderPtr]  # type: ignore 
        self.dll.AUTDLinkSOEMIntoBuilder.restype = LinkBuilderPtr

        self.dll.AUTDLinkRemoteSOEM.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDLinkRemoteSOEM.restype = ResultLinkRemoteSOEMBuilder

        self.dll.AUTDLinkRemoteSOEMWithTimeout.argtypes = [LinkRemoteSOEMBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkRemoteSOEMWithTimeout.restype = LinkRemoteSOEMBuilderPtr

        self.dll.AUTDLinkRemoteSOEMIntoBuilder.argtypes = [LinkRemoteSOEMBuilderPtr]  # type: ignore 
        self.dll.AUTDLinkRemoteSOEMIntoBuilder.restype = LinkBuilderPtr

    def adapter_pointer(self) -> ctypes.c_void_p:
        return self.dll.AUTDAdapterPointer()

    def adapter_get_size(self, adapters: ctypes.c_void_p | None) -> ctypes.c_uint32:
        return self.dll.AUTDAdapterGetSize(adapters)

    def adapter_get_adapter(self, adapters: ctypes.c_void_p | None, idx: int, desc: ctypes.Array[ctypes.c_char] | None, name: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDAdapterGetAdapter(adapters, idx, desc, name)

    def adapter_pointer_delete(self, adapters: ctypes.c_void_p | None) -> None:
        return self.dll.AUTDAdapterPointerDelete(adapters)

    def link_soem(self) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEM()

    def link_soem_with_send_cycle(self, soem: LinkSOEMBuilderPtr, cycle: int) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithSendCycle(soem, cycle)

    def link_soem_with_sync_0_cycle(self, soem: LinkSOEMBuilderPtr, cycle: int) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithSync0Cycle(soem, cycle)

    def link_soem_with_buf_size(self, soem: LinkSOEMBuilderPtr, buf_size: int) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithBufSize(soem, buf_size)

    def link_soem_with_timer_strategy(self, soem: LinkSOEMBuilderPtr, timer_strategy: TimerStrategy) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithTimerStrategy(soem, timer_strategy)

    def link_soem_with_sync_mode(self, soem: LinkSOEMBuilderPtr, mode: SyncMode) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithSyncMode(soem, mode)

    def link_soem_with_ifname(self, soem: LinkSOEMBuilderPtr, ifname: bytes) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithIfname(soem, ifname)

    def link_soem_with_state_check_interval(self, soem: LinkSOEMBuilderPtr, interval_ms: int) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithStateCheckInterval(soem, interval_ms)

    def link_soem_with_on_lost(self, soem: LinkSOEMBuilderPtr, on_lost_func: ctypes.c_void_p | None) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithOnLost(soem, on_lost_func)

    def link_soem_with_on_err(self, soem: LinkSOEMBuilderPtr, on_err_func: ctypes.c_void_p | None) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithOnErr(soem, on_err_func)

    def link_soem_with_timeout(self, soem: LinkSOEMBuilderPtr, timeout_ns: int) -> LinkSOEMBuilderPtr:
        return self.dll.AUTDLinkSOEMWithTimeout(soem, timeout_ns)

    def link_soem_into_builder(self, soem: LinkSOEMBuilderPtr) -> LinkBuilderPtr:
        return self.dll.AUTDLinkSOEMIntoBuilder(soem)

    def link_remote_soem(self, addr: bytes) -> ResultLinkRemoteSOEMBuilder:
        return self.dll.AUTDLinkRemoteSOEM(addr)

    def link_remote_soem_with_timeout(self, soem: LinkRemoteSOEMBuilderPtr, timeout_ns: int) -> LinkRemoteSOEMBuilderPtr:
        return self.dll.AUTDLinkRemoteSOEMWithTimeout(soem, timeout_ns)

    def link_remote_soem_into_builder(self, soem: LinkRemoteSOEMBuilderPtr) -> LinkBuilderPtr:
        return self.dll.AUTDLinkRemoteSOEMIntoBuilder(soem)
