# This file is autogenerated
import threading
import ctypes
import os
from pyautd3.native_methods.structs import Vector3, Quaternion
from pyautd3.native_methods.autd3capi_driver import DatagramPtr, DebugTypeWrap, DevicePtr, Drive, FociSTMPtr, GPIOIn, GainPtr, GainSTMMode, GainSTMPtr, GeometryPtr, LinkBuilderPtr, LinkPtr, LoopBehavior, ModulationPtr, ResultFociSTM, ResultGainSTM, ResultI32, ResultModulation, SamplingConfigWrap, Segment, TransducerPtr, TransitionModeWrap


class ControllerBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ControllerPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class FirmwareVersionListPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class GroupGainMapPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class GainCalcDrivesMapPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class LinkAuditBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ModulationCalcPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ResultController(ctypes.Structure):
    _fields_ = [("result", ControllerPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


    def __eq__(self, other: object) -> bool:
        return isinstance(other, ResultController) and self._fields_ == other._fields_ # pragma: no cover
                    

class ResultFirmwareVersionList(ctypes.Structure):
    _fields_ = [("result", FirmwareVersionListPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


    def __eq__(self, other: object) -> bool:
        return isinstance(other, ResultFirmwareVersionList) and self._fields_ == other._fields_ # pragma: no cover
                    

class ResultGainCalcDrivesMap(ctypes.Structure):
    _fields_ = [("result", GainCalcDrivesMapPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


    def __eq__(self, other: object) -> bool:
        return isinstance(other, ResultGainCalcDrivesMap) and self._fields_ == other._fields_ # pragma: no cover
                    

class ResultModulationCalc(ctypes.Structure):
    _fields_ = [("result", ModulationCalcPtr), ("config", SamplingConfigWrap), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


    def __eq__(self, other: object) -> bool:
        return isinstance(other, ResultModulationCalc) and self._fields_ == other._fields_ # pragma: no cover
                    


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances: # pragma: no cover
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi{bin_ext}'))
        except Exception:   # pragma: no cover
            return          # pragma: no cover

        self.dll.AUTDControllerBuilder.argtypes = [ctypes.POINTER(Vector3), ctypes.POINTER(Quaternion), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDControllerBuilder.restype = ControllerBuilderPtr

        self.dll.AUTDControllerBuilderWithUltrasoundFreq.argtypes = [ControllerBuilderPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDControllerBuilderWithUltrasoundFreq.restype = ControllerBuilderPtr

        self.dll.AUTDControllerBuilderWithParallelThreshold.argtypes = [ControllerBuilderPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDControllerBuilderWithParallelThreshold.restype = ControllerBuilderPtr

        self.dll.AUTDControllerOpen.argtypes = [ControllerBuilderPtr, LinkBuilderPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerOpen.restype = ResultController

        self.dll.AUTDControllerGroup.argtypes = [ControllerPtr, ctypes.c_void_p, ctypes.c_void_p, GeometryPtr, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(DatagramPtr), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDControllerGroup.restype = ResultI32

        self.dll.AUTDControllerClose.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerClose.restype = ResultI32

        self.dll.AUTDControllerDelete.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerDelete.restype = ResultI32

        self.dll.AUTDControllerLastParallelThreshold.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerLastParallelThreshold.restype = ctypes.c_uint16

        self.dll.AUTDControllerFPGAState.argtypes = [ControllerPtr, ctypes.POINTER(ctypes.c_int32)]  # type: ignore 
        self.dll.AUTDControllerFPGAState.restype = ResultI32

        self.dll.AUTDControllerFirmwareVersionListPointer.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareVersionListPointer.restype = ResultFirmwareVersionList

        self.dll.AUTDControllerFirmwareVersionGet.argtypes = [FirmwareVersionListPtr, ctypes.c_uint32, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDControllerFirmwareVersionGet.restype = None

        self.dll.AUTDControllerFirmwareVersionListPointerDelete.argtypes = [FirmwareVersionListPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareVersionListPointerDelete.restype = None

        self.dll.AUTDFirmwareLatest.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDFirmwareLatest.restype = None

        self.dll.AUTDControllerSend.argtypes = [ControllerPtr, DatagramPtr]  # type: ignore 
        self.dll.AUTDControllerSend.restype = ResultI32

        self.dll.AUTDDatagramClear.argtypes = [] 
        self.dll.AUTDDatagramClear.restype = DatagramPtr

        self.dll.AUTDDatagramDebugSettings.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramDebugSettings.restype = DatagramPtr

        self.dll.AUTDDatagramForceFan.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramForceFan.restype = DatagramPtr

        self.dll.AUTDDatagramTuple.argtypes = [DatagramPtr, DatagramPtr]  # type: ignore 
        self.dll.AUTDDatagramTuple.restype = DatagramPtr

        self.dll.AUTDDatagramPulseWidthEncoder.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramPulseWidthEncoder.restype = DatagramPtr

        self.dll.AUTDDatagramPulseWidthEncoderDefault.argtypes = [] 
        self.dll.AUTDDatagramPulseWidthEncoderDefault.restype = DatagramPtr

        self.dll.AUTDDatagramReadsFPGAState.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramReadsFPGAState.restype = DatagramPtr

        self.dll.AUTDDatagramSwapSegmentModulation.argtypes = [Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDDatagramSwapSegmentModulation.restype = DatagramPtr

        self.dll.AUTDDatagramSwapSegmentFociSTM.argtypes = [Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDDatagramSwapSegmentFociSTM.restype = DatagramPtr

        self.dll.AUTDDatagramSwapSegmentGainSTM.argtypes = [Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDDatagramSwapSegmentGainSTM.restype = DatagramPtr

        self.dll.AUTDDatagramSwapSegmentGain.argtypes = [Segment]  # type: ignore 
        self.dll.AUTDDatagramSwapSegmentGain.restype = DatagramPtr

        self.dll.AUTDDatagramSilencerFixedUpdateRate.argtypes = [ctypes.c_uint16, ctypes.c_uint16] 
        self.dll.AUTDDatagramSilencerFixedUpdateRate.restype = DatagramPtr

        self.dll.AUTDDatagramSilencerFixedCompletionSteps.argtypes = [ctypes.c_uint16, ctypes.c_uint16, ctypes.c_bool] 
        self.dll.AUTDDatagramSilencerFixedCompletionSteps.restype = DatagramPtr

        self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault.argtypes = [DatagramPtr]  # type: ignore 
        self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault.restype = ctypes.c_bool

        self.dll.AUTDSTMFociFromFreq.argtypes = [ctypes.c_float, ctypes.c_void_p, ctypes.c_uint16, ctypes.c_uint8] 
        self.dll.AUTDSTMFociFromFreq.restype = ResultFociSTM

        self.dll.AUTDSTMFociFromFreqNearest.argtypes = [ctypes.c_float, ctypes.c_void_p, ctypes.c_uint16, ctypes.c_uint8] 
        self.dll.AUTDSTMFociFromFreqNearest.restype = ResultFociSTM

        self.dll.AUTDSTMFociFromSamplingConfig.argtypes = [SamplingConfigWrap, ctypes.c_void_p, ctypes.c_uint16, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDSTMFociFromSamplingConfig.restype = FociSTMPtr

        self.dll.AUTDSTMFociWithLoopBehavior.argtypes = [FociSTMPtr, ctypes.c_uint8, LoopBehavior]  # type: ignore 
        self.dll.AUTDSTMFociWithLoopBehavior.restype = FociSTMPtr

        self.dll.AUTDSTMFociIntoDatagramWithSegment.argtypes = [FociSTMPtr, ctypes.c_uint8, Segment]  # type: ignore 
        self.dll.AUTDSTMFociIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDSTMFociIntoDatagramWithSegmentTransition.argtypes = [FociSTMPtr, ctypes.c_uint8, Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDSTMFociIntoDatagramWithSegmentTransition.restype = DatagramPtr

        self.dll.AUTDSTMFociIntoDatagram.argtypes = [FociSTMPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDSTMFociIntoDatagram.restype = DatagramPtr

        self.dll.AUTDSTMGainFromFreq.argtypes = [ctypes.c_float, ctypes.POINTER(GainPtr), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDSTMGainFromFreq.restype = ResultGainSTM

        self.dll.AUTDSTMGainFromFreqNearest.argtypes = [ctypes.c_float, ctypes.POINTER(GainPtr), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDSTMGainFromFreqNearest.restype = ResultGainSTM

        self.dll.AUTDSTMGainFromSamplingConfig.argtypes = [SamplingConfigWrap, ctypes.POINTER(GainPtr), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDSTMGainFromSamplingConfig.restype = GainSTMPtr

        self.dll.AUTDSTMGainWithMode.argtypes = [GainSTMPtr, GainSTMMode]  # type: ignore 
        self.dll.AUTDSTMGainWithMode.restype = GainSTMPtr

        self.dll.AUTDSTMGainWithLoopBehavior.argtypes = [GainSTMPtr, LoopBehavior]  # type: ignore 
        self.dll.AUTDSTMGainWithLoopBehavior.restype = GainSTMPtr

        self.dll.AUTDSTMGainIntoDatagramWithSegment.argtypes = [GainSTMPtr, Segment]  # type: ignore 
        self.dll.AUTDSTMGainIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDSTMGainIntoDatagramWithSegmentTransition.argtypes = [GainSTMPtr, Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDSTMGainIntoDatagramWithSegmentTransition.restype = DatagramPtr

        self.dll.AUTDSTMGainIntoDatagram.argtypes = [GainSTMPtr]  # type: ignore 
        self.dll.AUTDSTMGainIntoDatagram.restype = DatagramPtr

        self.dll.AUTDDatagramSynchronize.argtypes = [] 
        self.dll.AUTDDatagramSynchronize.restype = DatagramPtr

        self.dll.AUTDDatagramWithParallelThreshold.argtypes = [DatagramPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDDatagramWithParallelThreshold.restype = DatagramPtr

        self.dll.AUTDDatagramWithTimeout.argtypes = [DatagramPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDDatagramWithTimeout.restype = DatagramPtr

        self.dll.AUTDDcSysTimeNow.argtypes = [] 
        self.dll.AUTDDcSysTimeNow.restype = ctypes.c_uint64

        self.dll.AUTDDebugTypeNone.argtypes = [] 
        self.dll.AUTDDebugTypeNone.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeBaseSignal.argtypes = [] 
        self.dll.AUTDDebugTypeBaseSignal.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeThermo.argtypes = [] 
        self.dll.AUTDDebugTypeThermo.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeForceFan.argtypes = [] 
        self.dll.AUTDDebugTypeForceFan.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeSync.argtypes = [] 
        self.dll.AUTDDebugTypeSync.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeModSegment.argtypes = [] 
        self.dll.AUTDDebugTypeModSegment.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeModIdx.argtypes = [ctypes.c_uint16] 
        self.dll.AUTDDebugTypeModIdx.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeStmSegment.argtypes = [] 
        self.dll.AUTDDebugTypeStmSegment.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeStmIdx.argtypes = [ctypes.c_uint16] 
        self.dll.AUTDDebugTypeStmIdx.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeIsStmMode.argtypes = [] 
        self.dll.AUTDDebugTypeIsStmMode.restype = DebugTypeWrap

        self.dll.AUTDDebugTypePwmOut.argtypes = [TransducerPtr]  # type: ignore 
        self.dll.AUTDDebugTypePwmOut.restype = DebugTypeWrap

        self.dll.AUTDDebugTypeDirect.argtypes = [ctypes.c_bool] 
        self.dll.AUTDDebugTypeDirect.restype = DebugTypeWrap

        self.dll.AUTDLoopBehaviorInfinite.argtypes = [] 
        self.dll.AUTDLoopBehaviorInfinite.restype = LoopBehavior

        self.dll.AUTDLoopBehaviorFinite.argtypes = [ctypes.c_uint32] 
        self.dll.AUTDLoopBehaviorFinite.restype = LoopBehavior

        self.dll.AUTDLoopBehaviorOnce.argtypes = [] 
        self.dll.AUTDLoopBehaviorOnce.restype = LoopBehavior

        self.dll.AUTDPhaseFromRad.argtypes = [ctypes.c_float] 
        self.dll.AUTDPhaseFromRad.restype = ctypes.c_uint8

        self.dll.AUTDPhaseToRad.argtypes = [ctypes.c_uint8] 
        self.dll.AUTDPhaseToRad.restype = ctypes.c_float

        self.dll.AUTDSamplingConfigFromDivision.argtypes = [ctypes.c_uint32] 
        self.dll.AUTDSamplingConfigFromDivision.restype = SamplingConfigWrap

        self.dll.AUTDSamplingConfigFromDivisionRaw.argtypes = [ctypes.c_uint32] 
        self.dll.AUTDSamplingConfigFromDivisionRaw.restype = SamplingConfigWrap

        self.dll.AUTDSamplingConfigFromFreq.argtypes = [ctypes.c_uint32] 
        self.dll.AUTDSamplingConfigFromFreq.restype = SamplingConfigWrap

        self.dll.AUTDSamplingConfigFromFreqNearest.argtypes = [ctypes.c_float] 
        self.dll.AUTDSamplingConfigFromFreqNearest.restype = SamplingConfigWrap

        self.dll.AUTDTransitionModeSyncIdx.argtypes = [] 
        self.dll.AUTDTransitionModeSyncIdx.restype = TransitionModeWrap

        self.dll.AUTDTransitionModeSysTime.argtypes = [ctypes.c_uint64] 
        self.dll.AUTDTransitionModeSysTime.restype = TransitionModeWrap

        self.dll.AUTDTransitionModeGPIO.argtypes = [GPIOIn]  # type: ignore 
        self.dll.AUTDTransitionModeGPIO.restype = TransitionModeWrap

        self.dll.AUTDTransitionModeExt.argtypes = [] 
        self.dll.AUTDTransitionModeExt.restype = TransitionModeWrap

        self.dll.AUTDTransitionModeImmediate.argtypes = [] 
        self.dll.AUTDTransitionModeImmediate.restype = TransitionModeWrap

        self.dll.AUTDGainBessel.argtypes = [Vector3, Vector3, ctypes.c_float, ctypes.c_uint8, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainBessel.restype = GainPtr

        self.dll.AUTDGainBesselIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainBesselIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainCustom.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainCustom.restype = GainPtr

        self.dll.AUTDGainFocus.argtypes = [Vector3, ctypes.c_uint8, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainFocus.restype = GainPtr

        self.dll.AUTDGainFocusIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainFocusIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainGroupCreateMap.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint16] 
        self.dll.AUTDGainGroupCreateMap.restype = GroupGainMapPtr

        self.dll.AUTDGainGroupMapSet.argtypes = [GroupGainMapPtr, ctypes.c_uint16, ctypes.POINTER(ctypes.c_int32)]  # type: ignore 
        self.dll.AUTDGainGroupMapSet.restype = GroupGainMapPtr

        self.dll.AUTDGainGroup.argtypes = [GroupGainMapPtr, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(GainPtr), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainGroup.restype = GainPtr

        self.dll.AUTDGainIntoDatagramWithSegment.argtypes = [GainPtr, Segment, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDGainIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDGainIntoDatagram.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainIntoDatagram.restype = DatagramPtr

        self.dll.AUTDGainCalc.argtypes = [GainPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainCalc.restype = ResultGainCalcDrivesMap

        self.dll.AUTDGainCalcGetResult.argtypes = [GainCalcDrivesMapPtr, ctypes.POINTER(Drive), DevicePtr]  # type: ignore 
        self.dll.AUTDGainCalcGetResult.restype = None

        self.dll.AUTDGainCalcFreeResult.argtypes = [GainCalcDrivesMapPtr]  # type: ignore 
        self.dll.AUTDGainCalcFreeResult.restype = None

        self.dll.AUTDGainNull.argtypes = [] 
        self.dll.AUTDGainNull.restype = GainPtr

        self.dll.AUTDGainPlane.argtypes = [Vector3, ctypes.c_uint8, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainPlane.restype = GainPtr

        self.dll.AUTDGainPlanelIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainPlanelIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainRaw.argtypes = [] 
        self.dll.AUTDGainRaw.restype = GainPtr

        self.dll.AUTDGainRawSet.argtypes = [GainPtr, ctypes.c_uint16, ctypes.POINTER(Drive), ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainRawSet.restype = GainPtr

        self.dll.AUTDGainWithTransform.argtypes = [GainPtr, ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainWithTransform.restype = GainPtr

        self.dll.AUTDGainUniform.argtypes = [ctypes.c_uint8, ctypes.c_uint8] 
        self.dll.AUTDGainUniform.restype = GainPtr

        self.dll.AUTDGainUniformIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainUniformIsDefault.restype = ctypes.c_bool

        self.dll.AUTDDevice.argtypes = [GeometryPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDDevice.restype = DevicePtr

        self.dll.AUTDDeviceNumTransducers.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDDeviceGetSoundSpeed.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceGetSoundSpeed.restype = ctypes.c_float

        self.dll.AUTDDeviceSetSoundSpeed.argtypes = [DevicePtr, ctypes.c_float]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeed.restype = None

        self.dll.AUTDDeviceSetSoundSpeedFromTemp.argtypes = [DevicePtr, ctypes.c_float, ctypes.c_float, ctypes.c_float, ctypes.c_float]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeedFromTemp.restype = None

        self.dll.AUTDDeviceCenter.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceCenter.restype = Vector3

        self.dll.AUTDDeviceTranslate.argtypes = [DevicePtr, Vector3]  # type: ignore 
        self.dll.AUTDDeviceTranslate.restype = None

        self.dll.AUTDDeviceRotate.argtypes = [DevicePtr, Quaternion]  # type: ignore 
        self.dll.AUTDDeviceRotate.restype = None

        self.dll.AUTDDeviceAffine.argtypes = [DevicePtr, Vector3, Quaternion]  # type: ignore 
        self.dll.AUTDDeviceAffine.restype = None

        self.dll.AUTDDeviceEnableSet.argtypes = [DevicePtr, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDDeviceEnableSet.restype = None

        self.dll.AUTDDeviceEnableGet.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceEnableGet.restype = ctypes.c_bool

        self.dll.AUTDDeviceWavelength.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceWavelength.restype = ctypes.c_float

        self.dll.AUTDDeviceWavenumber.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceWavenumber.restype = ctypes.c_float

        self.dll.AUTDDeviceRotation.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceRotation.restype = Quaternion

        self.dll.AUTDDeviceDirectionX.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceDirectionX.restype = Vector3

        self.dll.AUTDDeviceDirectionY.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceDirectionY.restype = Vector3

        self.dll.AUTDDeviceDirectionAxial.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceDirectionAxial.restype = Vector3

        self.dll.AUTDGeometry.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDGeometry.restype = GeometryPtr

        self.dll.AUTDGeometryNumDevices.argtypes = [GeometryPtr]  # type: ignore 
        self.dll.AUTDGeometryNumDevices.restype = ctypes.c_uint32

        self.dll.AUTDRotationFromEulerZYZ.argtypes = [ctypes.c_float, ctypes.c_float, ctypes.c_float] 
        self.dll.AUTDRotationFromEulerZYZ.restype = Quaternion

        self.dll.AUTDTransducer.argtypes = [DevicePtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDTransducer.restype = TransducerPtr

        self.dll.AUTDTransducerPosition.argtypes = [TransducerPtr]  # type: ignore 
        self.dll.AUTDTransducerPosition.restype = Vector3

        self.dll.AUTDLinkAudit.argtypes = [] 
        self.dll.AUTDLinkAudit.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditWithTimeout.argtypes = [LinkAuditBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkAuditWithTimeout.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditIntoBuilder.argtypes = [LinkAuditBuilderPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIntoBuilder.restype = LinkBuilderPtr

        self.dll.AUTDLinkAuditIsOpen.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIsOpen.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditTimeoutNs.restype = ctypes.c_uint64

        self.dll.AUTDLinkAuditLastTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditLastTimeoutNs.restype = ctypes.c_int64

        self.dll.AUTDLinkAuditDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditDown.restype = None

        self.dll.AUTDLinkAuditBreakDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditBreakDown.restype = None

        self.dll.AUTDLinkAuditCpuNumTransducers.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditCpuNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaIsForceFan.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsForceFan.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaCurrentStmSegment.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaCurrentStmSegment.restype = Segment

        self.dll.AUTDLinkAuditFpgaCurrentModSegment.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaCurrentModSegment.restype = Segment

        self.dll.AUTDLinkAuditFpgaIsStmGainMode.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsStmGainMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaDebugTypes.argtypes = [LinkPtr, ctypes.c_uint16, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDebugTypes.restype = None

        self.dll.AUTDLinkAuditFpgaDebugValues.argtypes = [LinkPtr, ctypes.c_uint16, ctypes.POINTER(ctypes.c_uint16)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDebugValues.restype = None

        self.dll.AUTDLinkAuditFpgaStmFreqDivision.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmFreqDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaStmCycle.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmCycle.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSoundSpeed.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSoundSpeed.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaStmLoopBehavior.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmLoopBehavior.restype = LoopBehavior

        self.dll.AUTDLinkAuditFpgaModulationFreqDivision.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationFreqDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaModulationCycle.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationCycle.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaModulation.argtypes = [LinkPtr, Segment, ctypes.c_uint16, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulation.restype = None

        self.dll.AUTDLinkAuditFpgaModulationLoopBehavior.argtypes = [LinkPtr, Segment, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationLoopBehavior.restype = LoopBehavior

        self.dll.AUTDLinkAuditFpgaDrives.argtypes = [LinkPtr, Segment, ctypes.c_uint16, ctypes.c_uint16, ctypes.POINTER(ctypes.c_uint8), ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDrives.restype = None

        self.dll.AUTDLinkAuditFpgaPulseWidthEncoderTable.argtypes = [LinkPtr, ctypes.c_uint16, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaPulseWidthEncoderTable.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaUltrasoundFreq.argtypes = [LinkPtr, ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaUltrasoundFreq.restype = ctypes.c_uint32

        self.dll.AUTDLinkGet.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDLinkGet.restype = LinkPtr

        self.dll.AUTDLinkNop.argtypes = [] 
        self.dll.AUTDLinkNop.restype = LinkBuilderPtr

        self.dll.AUTDModulationFourierExact.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationFourierExact.restype = ResultModulation

        self.dll.AUTDModulationFourierExactFloat.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationFourierExactFloat.restype = ResultModulation

        self.dll.AUTDModulationFourierNearest.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationFourierNearest.restype = ResultModulation

        self.dll.AUTDModulationMixerExact.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationMixerExact.restype = ResultModulation

        self.dll.AUTDModulationMixerExactFloat.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationMixerExactFloat.restype = ResultModulation

        self.dll.AUTDModulationMixerNearest.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationMixerNearest.restype = ResultModulation

        self.dll.AUTDModulationIntoDatagramWithSegment.argtypes = [ModulationPtr, Segment]  # type: ignore 
        self.dll.AUTDModulationIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDModulationIntoDatagramWithSegmentTransition.argtypes = [ModulationPtr, Segment, TransitionModeWrap]  # type: ignore 
        self.dll.AUTDModulationIntoDatagramWithSegmentTransition.restype = DatagramPtr

        self.dll.AUTDModulationIntoDatagram.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationIntoDatagram.restype = DatagramPtr

        self.dll.AUTDModulationCalc.argtypes = [ModulationPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDModulationCalc.restype = ResultModulationCalc

        self.dll.AUTDModulationCalcGetResult.argtypes = [ModulationCalcPtr, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDModulationCalcGetResult.restype = None

        self.dll.AUTDModulationCalcGetSize.argtypes = [ModulationCalcPtr]  # type: ignore 
        self.dll.AUTDModulationCalcGetSize.restype = ctypes.c_uint16

        self.dll.AUTDModulationCalcFreeResult.argtypes = [ModulationCalcPtr]  # type: ignore 
        self.dll.AUTDModulationCalcFreeResult.restype = None

        self.dll.AUTDModulationWithRadiationPressure.argtypes = [ModulationPtr, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationWithRadiationPressure.restype = ModulationPtr

        self.dll.AUTDModulationRaw.argtypes = [SamplingConfigWrap, LoopBehavior, ctypes.POINTER(ctypes.c_uint8), ctypes.c_uint16]  # type: ignore 
        self.dll.AUTDModulationRaw.restype = ModulationPtr

        self.dll.AUTDModulationSineExact.argtypes = [ctypes.c_uint32, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSineExact.restype = ModulationPtr

        self.dll.AUTDModulationSineExactFloat.argtypes = [ctypes.c_float, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSineExactFloat.restype = ModulationPtr

        self.dll.AUTDModulationSineNearest.argtypes = [ctypes.c_float, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSineNearest.restype = ModulationPtr

        self.dll.AUTDModulationSineIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSineIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationSquareExact.argtypes = [ctypes.c_uint32, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSquareExact.restype = ModulationPtr

        self.dll.AUTDModulationSquareExactFloat.argtypes = [ctypes.c_float, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSquareExactFloat.restype = ModulationPtr

        self.dll.AUTDModulationSquareNearest.argtypes = [ctypes.c_float, SamplingConfigWrap, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_float, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSquareNearest.restype = ModulationPtr

        self.dll.AUTDModulationSquareIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSquareIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationStatic.argtypes = [ctypes.c_uint8, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationStatic.restype = ModulationPtr

        self.dll.AUTDModulationStaticIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationStaticIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationWithTransform.argtypes = [ModulationPtr, ctypes.c_void_p, ctypes.c_void_p, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationWithTransform.restype = ModulationPtr

        self.dll.AUTDGetErr.argtypes = [ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDGetErr.restype = None

    def controller_builder(self, pos: ctypes.Array | None, rot: ctypes.Array | None, len: int) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilder(pos, rot, len)

    def controller_builder_with_ultrasound_freq(self, builder: ControllerBuilderPtr, ultrasound_freq: int) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilderWithUltrasoundFreq(builder, ultrasound_freq)

    def controller_builder_with_parallel_threshold(self, builder: ControllerBuilderPtr, parallel_threshold: int) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilderWithParallelThreshold(builder, parallel_threshold)

    def controller_open(self, builder: ControllerBuilderPtr, link_builder: LinkBuilderPtr, timeout_ns: int) -> ResultController:
        return self.dll.AUTDControllerOpen(builder, link_builder, timeout_ns)

    def controller_group(self, cnt: ControllerPtr, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr, keys: ctypes.Array[ctypes.c_int32] | None, d: ctypes.Array | None, n: int) -> ResultI32:
        return self.dll.AUTDControllerGroup(cnt, f, context, geometry, keys, d, n)

    def controller_close(self, cnt: ControllerPtr) -> ResultI32:
        return self.dll.AUTDControllerClose(cnt)

    def controller_delete(self, cnt: ControllerPtr) -> ResultI32:
        return self.dll.AUTDControllerDelete(cnt)

    def controller_last_parallel_threshold(self, cnt: ControllerPtr) -> ctypes.c_uint16:
        return self.dll.AUTDControllerLastParallelThreshold(cnt)

    def controller_fpga_state(self, cnt: ControllerPtr, out: ctypes.Array[ctypes.c_int32] | None) -> ResultI32:
        return self.dll.AUTDControllerFPGAState(cnt, out)

    def controller_firmware_version_list_pointer(self, cnt: ControllerPtr) -> ResultFirmwareVersionList:
        return self.dll.AUTDControllerFirmwareVersionListPointer(cnt)

    def controller_firmware_version_get(self, p_info_list: FirmwareVersionListPtr, idx: int, info: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDControllerFirmwareVersionGet(p_info_list, idx, info)

    def controller_firmware_version_list_pointer_delete(self, p_info_list: FirmwareVersionListPtr) -> None:
        return self.dll.AUTDControllerFirmwareVersionListPointerDelete(p_info_list)

    def firmware_latest(self, latest: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDFirmwareLatest(latest)

    def controller_send(self, cnt: ControllerPtr, d: DatagramPtr) -> ResultI32:
        return self.dll.AUTDControllerSend(cnt, d)

    def datagram_clear(self) -> DatagramPtr:
        return self.dll.AUTDDatagramClear()

    def datagram_debug_settings(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramDebugSettings(f, context, geometry)

    def datagram_force_fan(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramForceFan(f, context, geometry)

    def datagram_tuple(self, d1: DatagramPtr, d2: DatagramPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramTuple(d1, d2)

    def datagram_pulse_width_encoder(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramPulseWidthEncoder(f, context, geometry)

    def datagram_pulse_width_encoder_default(self) -> DatagramPtr:
        return self.dll.AUTDDatagramPulseWidthEncoderDefault()

    def datagram_reads_fpga_state(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramReadsFPGAState(f, context, geometry)

    def datagram_swap_segment_modulation(self, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDDatagramSwapSegmentModulation(segment, transition_mode)

    def datagram_swap_segment_foci_stm(self, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDDatagramSwapSegmentFociSTM(segment, transition_mode)

    def datagram_swap_segment_gain_stm(self, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDDatagramSwapSegmentGainSTM(segment, transition_mode)

    def datagram_swap_segment_gain(self, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDDatagramSwapSegmentGain(segment)

    def datagram_silencer_fixed_update_rate(self, value_intensity: int, value_phase: int) -> DatagramPtr:
        return self.dll.AUTDDatagramSilencerFixedUpdateRate(value_intensity, value_phase)

    def datagram_silencer_fixed_completion_steps(self, value_intensity: int, value_phase: int, strict_mode: bool) -> DatagramPtr:
        return self.dll.AUTDDatagramSilencerFixedCompletionSteps(value_intensity, value_phase, strict_mode)

    def datagram_silencer_fixed_completion_steps_is_default(self, silencer: DatagramPtr) -> ctypes.c_bool:
        return self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault(silencer)

    def stm_foci_from_freq(self, freq: float, points: ctypes.c_void_p | None, size: int, n: int) -> ResultFociSTM:
        return self.dll.AUTDSTMFociFromFreq(freq, points, size, n)

    def stm_foci_from_freq_nearest(self, freq: float, points: ctypes.c_void_p | None, size: int, n: int) -> ResultFociSTM:
        return self.dll.AUTDSTMFociFromFreqNearest(freq, points, size, n)

    def stm_foci_from_sampling_config(self, config: SamplingConfigWrap, points: ctypes.c_void_p | None, size: int, n: int) -> FociSTMPtr:
        return self.dll.AUTDSTMFociFromSamplingConfig(config, points, size, n)

    def stm_foci_with_loop_behavior(self, stm: FociSTMPtr, n: int, loop_behavior: LoopBehavior) -> FociSTMPtr:
        return self.dll.AUTDSTMFociWithLoopBehavior(stm, n, loop_behavior)

    def stm_foci_into_datagram_with_segment(self, stm: FociSTMPtr, n: int, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDSTMFociIntoDatagramWithSegment(stm, n, segment)

    def stm_foci_into_datagram_with_segment_transition(self, stm: FociSTMPtr, n: int, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDSTMFociIntoDatagramWithSegmentTransition(stm, n, segment, transition_mode)

    def stm_foci_into_datagram(self, stm: FociSTMPtr, n: int) -> DatagramPtr:
        return self.dll.AUTDSTMFociIntoDatagram(stm, n)

    def stm_gain_from_freq(self, freq: float, gains: ctypes.Array | None, size: int) -> ResultGainSTM:
        return self.dll.AUTDSTMGainFromFreq(freq, gains, size)

    def stm_gain_from_freq_nearest(self, freq: float, gains: ctypes.Array | None, size: int) -> ResultGainSTM:
        return self.dll.AUTDSTMGainFromFreqNearest(freq, gains, size)

    def stm_gain_from_sampling_config(self, config: SamplingConfigWrap, gains: ctypes.Array | None, size: int) -> GainSTMPtr:
        return self.dll.AUTDSTMGainFromSamplingConfig(config, gains, size)

    def stm_gain_with_mode(self, stm: GainSTMPtr, mode: GainSTMMode) -> GainSTMPtr:
        return self.dll.AUTDSTMGainWithMode(stm, mode)

    def stm_gain_with_loop_behavior(self, stm: GainSTMPtr, loop_behavior: LoopBehavior) -> GainSTMPtr:
        return self.dll.AUTDSTMGainWithLoopBehavior(stm, loop_behavior)

    def stm_gain_into_datagram_with_segment(self, stm: GainSTMPtr, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDSTMGainIntoDatagramWithSegment(stm, segment)

    def stm_gain_into_datagram_with_segment_transition(self, stm: GainSTMPtr, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDSTMGainIntoDatagramWithSegmentTransition(stm, segment, transition_mode)

    def stm_gain_into_datagram(self, stm: GainSTMPtr) -> DatagramPtr:
        return self.dll.AUTDSTMGainIntoDatagram(stm)

    def datagram_synchronize(self) -> DatagramPtr:
        return self.dll.AUTDDatagramSynchronize()

    def datagram_with_parallel_threshold(self, d: DatagramPtr, threshold: int) -> DatagramPtr:
        return self.dll.AUTDDatagramWithParallelThreshold(d, threshold)

    def datagram_with_timeout(self, d: DatagramPtr, timeout_ns: int) -> DatagramPtr:
        return self.dll.AUTDDatagramWithTimeout(d, timeout_ns)

    def dc_sys_time_now(self) -> ctypes.c_uint64:
        return self.dll.AUTDDcSysTimeNow()

    def debug_type_none(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeNone()

    def debug_type_base_signal(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeBaseSignal()

    def debug_type_thermo(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeThermo()

    def debug_type_force_fan(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeForceFan()

    def debug_type_sync(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeSync()

    def debug_type_mod_segment(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeModSegment()

    def debug_type_mod_idx(self, value: int) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeModIdx(value)

    def debug_type_stm_segment(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeStmSegment()

    def debug_type_stm_idx(self, value: int) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeStmIdx(value)

    def debug_type_is_stm_mode(self) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeIsStmMode()

    def debug_type_pwm_out(self, value: TransducerPtr) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypePwmOut(value)

    def debug_type_direct(self, value: bool) -> DebugTypeWrap:
        return self.dll.AUTDDebugTypeDirect(value)

    def loop_behavior_infinite(self) -> LoopBehavior:
        return self.dll.AUTDLoopBehaviorInfinite()

    def loop_behavior_finite(self, v: int) -> LoopBehavior:
        return self.dll.AUTDLoopBehaviorFinite(v)

    def loop_behavior_once(self) -> LoopBehavior:
        return self.dll.AUTDLoopBehaviorOnce()

    def phase_from_rad(self, value: float) -> ctypes.c_uint8:
        return self.dll.AUTDPhaseFromRad(value)

    def phase_to_rad(self, value: int) -> ctypes.c_float:
        return self.dll.AUTDPhaseToRad(value)

    def sampling_config_from_division(self, div: int) -> SamplingConfigWrap:
        return self.dll.AUTDSamplingConfigFromDivision(div)

    def sampling_config_from_division_raw(self, div: int) -> SamplingConfigWrap:
        return self.dll.AUTDSamplingConfigFromDivisionRaw(div)

    def sampling_config_from_freq(self, f: int) -> SamplingConfigWrap:
        return self.dll.AUTDSamplingConfigFromFreq(f)

    def sampling_config_from_freq_nearest(self, f: float) -> SamplingConfigWrap:
        return self.dll.AUTDSamplingConfigFromFreqNearest(f)

    def transition_mode_sync_idx(self) -> TransitionModeWrap:
        return self.dll.AUTDTransitionModeSyncIdx()

    def transition_mode_sys_time(self, sys_time: int) -> TransitionModeWrap:
        return self.dll.AUTDTransitionModeSysTime(sys_time)

    def transition_mode_gpio(self, gpio: GPIOIn) -> TransitionModeWrap:
        return self.dll.AUTDTransitionModeGPIO(gpio)

    def transition_mode_ext(self) -> TransitionModeWrap:
        return self.dll.AUTDTransitionModeExt()

    def transition_mode_immediate(self) -> TransitionModeWrap:
        return self.dll.AUTDTransitionModeImmediate()

    def gain_bessel(self, p: Vector3, n: Vector3, theta_z: float, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainBessel(p, n, theta_z, intensity, phase_offset)

    def gain_bessel_is_default(self, bessel: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainBesselIsDefault(bessel)

    def gain_custom(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> GainPtr:
        return self.dll.AUTDGainCustom(f, context, geometry)

    def gain_focus(self, p: Vector3, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainFocus(p, intensity, phase_offset)

    def gain_focus_is_default(self, focus: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainFocusIsDefault(focus)

    def gain_group_create_map(self, device_indices_ptr: ctypes.Array[ctypes.c_uint32] | None, num_devices: int) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupCreateMap(device_indices_ptr, num_devices)

    def gain_group_map_set(self, map: GroupGainMapPtr, dev_idx: int, map_data: ctypes.Array[ctypes.c_int32] | None) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupMapSet(map, dev_idx, map_data)

    def gain_group(self, map: GroupGainMapPtr, keys_ptr: ctypes.Array[ctypes.c_int32] | None, values_ptr: ctypes.Array | None, kv_len: int) -> GainPtr:
        return self.dll.AUTDGainGroup(map, keys_ptr, values_ptr, kv_len)

    def gain_into_datagram_with_segment(self, gain: GainPtr, segment: Segment, update_segment: bool) -> DatagramPtr:
        return self.dll.AUTDGainIntoDatagramWithSegment(gain, segment, update_segment)

    def gain_into_datagram(self, gain: GainPtr) -> DatagramPtr:
        return self.dll.AUTDGainIntoDatagram(gain)

    def gain_calc(self, gain: GainPtr, geometry: GeometryPtr) -> ResultGainCalcDrivesMap:
        return self.dll.AUTDGainCalc(gain, geometry)

    def gain_calc_get_result(self, src: GainCalcDrivesMapPtr, dst: ctypes.Array | None, device: DevicePtr) -> None:
        return self.dll.AUTDGainCalcGetResult(src, dst, device)

    def gain_calc_free_result(self, src: GainCalcDrivesMapPtr) -> None:
        return self.dll.AUTDGainCalcFreeResult(src)

    def gain_null(self) -> GainPtr:
        return self.dll.AUTDGainNull()

    def gain_plane(self, n: Vector3, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainPlane(n, intensity, phase_offset)

    def gain_planel_is_default(self, plane: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainPlanelIsDefault(plane)

    def gain_raw(self) -> GainPtr:
        return self.dll.AUTDGainRaw()

    def gain_raw_set(self, custom: GainPtr, dev_idx: int, ptr: ctypes.Array | None, len: int) -> GainPtr:
        return self.dll.AUTDGainRawSet(custom, dev_idx, ptr, len)

    def gain_with_transform(self, g: GainPtr, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> GainPtr:
        return self.dll.AUTDGainWithTransform(g, f, context, geometry)

    def gain_uniform(self, intensity: int, phase: int) -> GainPtr:
        return self.dll.AUTDGainUniform(intensity, phase)

    def gain_uniform_is_default(self, uniform: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainUniformIsDefault(uniform)

    def device(self, geo: GeometryPtr, dev_idx: int) -> DevicePtr:
        return self.dll.AUTDDevice(geo, dev_idx)

    def device_num_transducers(self, dev: DevicePtr) -> ctypes.c_uint32:
        return self.dll.AUTDDeviceNumTransducers(dev)

    def device_get_sound_speed(self, dev: DevicePtr) -> ctypes.c_float:
        return self.dll.AUTDDeviceGetSoundSpeed(dev)

    def device_set_sound_speed(self, dev: DevicePtr, value: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeed(dev, value)

    def device_set_sound_speed_from_temp(self, dev: DevicePtr, temp: float, k: float, r: float, m: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeedFromTemp(dev, temp, k, r, m)

    def device_center(self, dev: DevicePtr) -> Vector3:
        return self.dll.AUTDDeviceCenter(dev)

    def device_translate(self, dev: DevicePtr, t: Vector3) -> None:
        return self.dll.AUTDDeviceTranslate(dev, t)

    def device_rotate(self, dev: DevicePtr, r: Quaternion) -> None:
        return self.dll.AUTDDeviceRotate(dev, r)

    def device_affine(self, dev: DevicePtr, t: Vector3, r: Quaternion) -> None:
        return self.dll.AUTDDeviceAffine(dev, t, r)

    def device_enable_set(self, dev: DevicePtr, value: bool) -> None:
        return self.dll.AUTDDeviceEnableSet(dev, value)

    def device_enable_get(self, dev: DevicePtr) -> ctypes.c_bool:
        return self.dll.AUTDDeviceEnableGet(dev)

    def device_wavelength(self, dev: DevicePtr) -> ctypes.c_float:
        return self.dll.AUTDDeviceWavelength(dev)

    def device_wavenumber(self, dev: DevicePtr) -> ctypes.c_float:
        return self.dll.AUTDDeviceWavenumber(dev)

    def device_rotation(self, dev: DevicePtr) -> Quaternion:
        return self.dll.AUTDDeviceRotation(dev)

    def device_direction_x(self, dev: DevicePtr) -> Vector3:
        return self.dll.AUTDDeviceDirectionX(dev)

    def device_direction_y(self, dev: DevicePtr) -> Vector3:
        return self.dll.AUTDDeviceDirectionY(dev)

    def device_direction_axial(self, dev: DevicePtr) -> Vector3:
        return self.dll.AUTDDeviceDirectionAxial(dev)

    def geometry(self, cnt: ControllerPtr) -> GeometryPtr:
        return self.dll.AUTDGeometry(cnt)

    def geometry_num_devices(self, geo: GeometryPtr) -> ctypes.c_uint32:
        return self.dll.AUTDGeometryNumDevices(geo)

    def rotation_from_euler_zyz(self, x: float, y: float, z: float) -> Quaternion:
        return self.dll.AUTDRotationFromEulerZYZ(x, y, z)

    def transducer(self, dev: DevicePtr, idx: int) -> TransducerPtr:
        return self.dll.AUTDTransducer(dev, idx)

    def transducer_position(self, tr: TransducerPtr) -> Vector3:
        return self.dll.AUTDTransducerPosition(tr)

    def link_audit(self) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAudit()

    def link_audit_with_timeout(self, audit: LinkAuditBuilderPtr, timeout_ns: int) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAuditWithTimeout(audit, timeout_ns)

    def link_audit_into_builder(self, audit: LinkAuditBuilderPtr) -> LinkBuilderPtr:
        return self.dll.AUTDLinkAuditIntoBuilder(audit)

    def link_audit_is_open(self, audit: LinkPtr) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditIsOpen(audit)

    def link_audit_timeout_ns(self, audit: LinkPtr) -> ctypes.c_uint64:
        return self.dll.AUTDLinkAuditTimeoutNs(audit)

    def link_audit_last_timeout_ns(self, audit: LinkPtr) -> ctypes.c_int64:
        return self.dll.AUTDLinkAuditLastTimeoutNs(audit)

    def link_audit_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditDown(audit)

    def link_audit_break_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditBreakDown(audit)

    def link_audit_cpu_num_transducers(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditCpuNumTransducers(audit, idx)

    def link_audit_fpga_assert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaAssertThermalSensor(audit, idx)

    def link_audit_fpga_deassert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaDeassertThermalSensor(audit, idx)

    def link_audit_fpga_is_force_fan(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsForceFan(audit, idx)

    def link_audit_fpga_current_stm_segment(self, audit: LinkPtr, idx: int) -> Segment:
        return self.dll.AUTDLinkAuditFpgaCurrentStmSegment(audit, idx)

    def link_audit_fpga_current_mod_segment(self, audit: LinkPtr, idx: int) -> Segment:
        return self.dll.AUTDLinkAuditFpgaCurrentModSegment(audit, idx)

    def link_audit_fpga_is_stm_gain_mode(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsStmGainMode(audit, segment, idx)

    def link_audit_fpga_silencer_update_rate_intensity(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity(audit, idx)

    def link_audit_fpga_silencer_update_rate_phase(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase(audit, idx)

    def link_audit_fpga_silencer_completion_steps_intensity(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(audit, idx)

    def link_audit_fpga_silencer_completion_steps_phase(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase(audit, idx)

    def link_audit_fpga_silencer_fixed_completion_steps_mode(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(audit, idx)

    def link_audit_fpga_debug_types(self, audit: LinkPtr, idx: int, ty: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaDebugTypes(audit, idx, ty)

    def link_audit_fpga_debug_values(self, audit: LinkPtr, idx: int, value: ctypes.Array[ctypes.c_uint16] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaDebugValues(audit, idx, value)

    def link_audit_fpga_stm_freq_division(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaStmFreqDivision(audit, segment, idx)

    def link_audit_fpga_stm_cycle(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaStmCycle(audit, segment, idx)

    def link_audit_fpga_sound_speed(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSoundSpeed(audit, segment, idx)

    def link_audit_fpga_stm_loop_behavior(self, audit: LinkPtr, segment: Segment, idx: int) -> LoopBehavior:
        return self.dll.AUTDLinkAuditFpgaStmLoopBehavior(audit, segment, idx)

    def link_audit_fpga_modulation_freq_division(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaModulationFreqDivision(audit, segment, idx)

    def link_audit_fpga_modulation_cycle(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaModulationCycle(audit, segment, idx)

    def link_audit_fpga_modulation(self, audit: LinkPtr, segment: Segment, idx: int, data: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaModulation(audit, segment, idx, data)

    def link_audit_fpga_modulation_loop_behavior(self, audit: LinkPtr, segment: Segment, idx: int) -> LoopBehavior:
        return self.dll.AUTDLinkAuditFpgaModulationLoopBehavior(audit, segment, idx)

    def link_audit_fpga_drives(self, audit: LinkPtr, segment: Segment, idx: int, stm_idx: int, intensities: ctypes.Array[ctypes.c_uint8] | None, phases: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaDrives(audit, segment, idx, stm_idx, intensities, phases)

    def link_audit_fpga_pulse_width_encoder_table(self, audit: LinkPtr, idx: int, dst: ctypes.Array[ctypes.c_uint8] | None) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaPulseWidthEncoderTable(audit, idx, dst)

    def link_audit_fpga_ultrasound_freq(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaUltrasoundFreq(audit, idx)

    def link_get(self, cnt: ControllerPtr) -> LinkPtr:
        return self.dll.AUTDLinkGet(cnt)

    def link_nop(self) -> LinkBuilderPtr:
        return self.dll.AUTDLinkNop()

    def modulation_fourier_exact(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationFourierExact(components, size, loop_behavior)

    def modulation_fourier_exact_float(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationFourierExactFloat(components, size, loop_behavior)

    def modulation_fourier_nearest(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationFourierNearest(components, size, loop_behavior)

    def modulation_mixer_exact(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationMixerExact(components, size, loop_behavior)

    def modulation_mixer_exact_float(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationMixerExactFloat(components, size, loop_behavior)

    def modulation_mixer_nearest(self, components: ctypes.Array | None, size: int, loop_behavior: LoopBehavior) -> ResultModulation:
        return self.dll.AUTDModulationMixerNearest(components, size, loop_behavior)

    def modulation_into_datagram_with_segment(self, m: ModulationPtr, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagramWithSegment(m, segment)

    def modulation_into_datagram_with_segment_transition(self, m: ModulationPtr, segment: Segment, transition_mode: TransitionModeWrap) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagramWithSegmentTransition(m, segment, transition_mode)

    def modulation_into_datagram(self, m: ModulationPtr) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagram(m)

    def modulation_calc(self, m: ModulationPtr, geometry: GeometryPtr) -> ResultModulationCalc:
        return self.dll.AUTDModulationCalc(m, geometry)

    def modulation_calc_get_result(self, src: ModulationCalcPtr, dst: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDModulationCalcGetResult(src, dst)

    def modulation_calc_get_size(self, src: ModulationCalcPtr) -> ctypes.c_uint16:
        return self.dll.AUTDModulationCalcGetSize(src)

    def modulation_calc_free_result(self, src: ModulationCalcPtr) -> None:
        return self.dll.AUTDModulationCalcFreeResult(src)

    def modulation_with_radiation_pressure(self, m: ModulationPtr, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationWithRadiationPressure(m, loop_behavior)

    def modulation_raw(self, config: SamplingConfigWrap, loop_behavior: LoopBehavior, ptr: ctypes.Array[ctypes.c_uint8] | None, len: int) -> ModulationPtr:
        return self.dll.AUTDModulationRaw(config, loop_behavior, ptr, len)

    def modulation_sine_exact(self, freq: int, config: SamplingConfigWrap, intensity: int, offset: int, phase: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSineExact(freq, config, intensity, offset, phase, loop_behavior)

    def modulation_sine_exact_float(self, freq: float, config: SamplingConfigWrap, intensity: int, offset: int, phase: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSineExactFloat(freq, config, intensity, offset, phase, loop_behavior)

    def modulation_sine_nearest(self, freq: float, config: SamplingConfigWrap, intensity: int, offset: int, phase: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSineNearest(freq, config, intensity, offset, phase, loop_behavior)

    def modulation_sine_is_default(self, sine: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationSineIsDefault(sine)

    def modulation_square_exact(self, freq: int, config: SamplingConfigWrap, low: int, high: int, duty: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSquareExact(freq, config, low, high, duty, loop_behavior)

    def modulation_square_exact_float(self, freq: float, config: SamplingConfigWrap, low: int, high: int, duty: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSquareExactFloat(freq, config, low, high, duty, loop_behavior)

    def modulation_square_nearest(self, freq: float, config: SamplingConfigWrap, low: int, high: int, duty: float, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSquareNearest(freq, config, low, high, duty, loop_behavior)

    def modulation_square_is_default(self, square: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationSquareIsDefault(square)

    def modulation_static(self, intensity: int, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationStatic(intensity, loop_behavior)

    def modulation_static_is_default(self, s: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationStaticIsDefault(s)

    def modulation_with_transform(self, m: ModulationPtr, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationWithTransform(m, f, context, loop_behavior)

    def get_err(self, src: ctypes.c_void_p | None, dst: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDGetErr(src, dst)
