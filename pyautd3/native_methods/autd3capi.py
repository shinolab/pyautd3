# This file is autogenerated
import threading
import ctypes
import os
from pyautd3.native_methods.autd3capi_def import ControllerPtr, DatagramPtr, DevicePtr, Drive, FocusSTMPtr, GainPtr, GainSTMMode, GainSTMPtr, GeometryPtr, LinkBuilderPtr, LinkPtr, LoopBehavior, ModulationPtr, ResultController, ResultDatagram, ResultFocusSTM, ResultGainSTM, ResultI32, ResultSamplingConfig, SamplingConfiguration, Segment, TransducerPtr

from enum import IntEnum

class SamplingMode(IntEnum):
    ExactFrequency = 0
    SizeOptimized = 1

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class GroupGainMapPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class GainCalcDrivesMapPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ContextPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ControllerBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class FirmwareInfoListPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class GroupKVMapPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class LinkAuditBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ModulationCalcPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class STMPropsPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ResultGainCalcDrivesMap(ctypes.Structure):
    _fields_ = [("result", GainCalcDrivesMapPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultFirmwareInfoList(ctypes.Structure):
    _fields_ = [("result", FirmwareInfoListPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultGroupKVMap(ctypes.Structure):
    _fields_ = [("result", GroupKVMapPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultModulationCalc(ctypes.Structure):
    _fields_ = [("result", ModulationCalcPtr), ("result_len", ctypes.c_uint32), ("freq_div", ctypes.c_uint32), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances: # pragma: no cover
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi{bin_ext}'))
        except Exception:   # pragma: no cover
            return          # pragma: no cover

        self.dll.AUTDDatagramClear.argtypes = [] 
        self.dll.AUTDDatagramClear.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureDebugOutputIdx.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureDebugOutputIdx.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureForceFan.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureForceFan.restype = DatagramPtr

        self.dll.AUTDDatagramConfigurePhaseFilter.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigurePhaseFilter.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureReadsFPGAState.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureReadsFPGAState.restype = DatagramPtr

        self.dll.AUTDDatagramSilencerFixedUpdateRate.argtypes = [ctypes.c_uint16, ctypes.c_uint16] 
        self.dll.AUTDDatagramSilencerFixedUpdateRate.restype = ResultDatagram

        self.dll.AUTDDatagramSilencerFixedCompletionSteps.argtypes = [ctypes.c_uint16, ctypes.c_uint16, ctypes.c_bool] 
        self.dll.AUTDDatagramSilencerFixedCompletionSteps.restype = ResultDatagram

        self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault.argtypes = [DatagramPtr]  # type: ignore 
        self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault.restype = ctypes.c_bool

        self.dll.AUTDDatagramSynchronize.argtypes = [] 
        self.dll.AUTDDatagramSynchronize.restype = DatagramPtr

        self.dll.AUTDGainBessel.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_uint8, ctypes.c_uint8] 
        self.dll.AUTDGainBessel.restype = GainPtr

        self.dll.AUTDGainBesselIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainBesselIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainCustom.argtypes = [] 
        self.dll.AUTDGainCustom.restype = GainPtr

        self.dll.AUTDGainCustomSet.argtypes = [GainPtr, ctypes.c_uint32, ctypes.POINTER(Drive), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainCustomSet.restype = GainPtr

        self.dll.AUTDGainFocus.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_uint8, ctypes.c_uint8] 
        self.dll.AUTDGainFocus.restype = GainPtr

        self.dll.AUTDGainFocusIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainFocusIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainGroupCreateMap.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32] 
        self.dll.AUTDGainGroupCreateMap.restype = GroupGainMapPtr

        self.dll.AUTDGainGroupMapSet.argtypes = [GroupGainMapPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int32)]  # type: ignore 
        self.dll.AUTDGainGroupMapSet.restype = GroupGainMapPtr

        self.dll.AUTDGainGroup.argtypes = [GroupGainMapPtr, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(GainPtr), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainGroup.restype = GainPtr

        self.dll.AUTDGainIntoDatagramWithSegment.argtypes = [GainPtr, Segment, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDGainIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDGainIntoDatagram.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainIntoDatagram.restype = DatagramPtr

        self.dll.AUTDGainCalc.argtypes = [GainPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainCalc.restype = ResultGainCalcDrivesMap

        self.dll.AUTDGainCalcGetResult.argtypes = [GainCalcDrivesMapPtr, ctypes.POINTER(Drive), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainCalcGetResult.restype = None

        self.dll.AUTDGainCalcFreeResult.argtypes = [GainCalcDrivesMapPtr]  # type: ignore 
        self.dll.AUTDGainCalcFreeResult.restype = None

        self.dll.AUTDDatagramChangeGainSegment.argtypes = [Segment]  # type: ignore 
        self.dll.AUTDDatagramChangeGainSegment.restype = DatagramPtr

        self.dll.AUTDGainNull.argtypes = [] 
        self.dll.AUTDGainNull.restype = GainPtr

        self.dll.AUTDGainPlane.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_uint8, ctypes.c_uint8] 
        self.dll.AUTDGainPlane.restype = GainPtr

        self.dll.AUTDGainPlanelIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainPlanelIsDefault.restype = ctypes.c_bool

        self.dll.AUTDGainTransducerTest.argtypes = [ctypes.c_void_p, ContextPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainTransducerTest.restype = GainPtr

        self.dll.AUTDGainUniform.argtypes = [ctypes.c_uint8, ctypes.c_uint8] 
        self.dll.AUTDGainUniform.restype = GainPtr

        self.dll.AUTDGainUniformIsDefault.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainUniformIsDefault.restype = ctypes.c_bool

        self.dll.AUTDDevice.argtypes = [GeometryPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDDevice.restype = DevicePtr

        self.dll.AUTDDeviceNumTransducers.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDDeviceGetSoundSpeed.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceGetSoundSpeed.restype = ctypes.c_double

        self.dll.AUTDDeviceSetSoundSpeed.argtypes = [DevicePtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeed.restype = None

        self.dll.AUTDDeviceSetSoundSpeedFromTemp.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeedFromTemp.restype = None

        self.dll.AUTDDeviceGetAttenuation.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceGetAttenuation.restype = ctypes.c_double

        self.dll.AUTDDeviceSetAttenuation.argtypes = [DevicePtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetAttenuation.restype = None

        self.dll.AUTDDeviceCenter.argtypes = [DevicePtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDDeviceCenter.restype = None

        self.dll.AUTDDeviceTranslate.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceTranslate.restype = None

        self.dll.AUTDDeviceRotate.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceRotate.restype = None

        self.dll.AUTDDeviceAffine.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceAffine.restype = None

        self.dll.AUTDDeviceEnableSet.argtypes = [DevicePtr, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDDeviceEnableSet.restype = None

        self.dll.AUTDDeviceEnableGet.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceEnableGet.restype = ctypes.c_bool

        self.dll.AUTDGeometry.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDGeometry.restype = GeometryPtr

        self.dll.AUTDGeometryNumDevices.argtypes = [GeometryPtr]  # type: ignore 
        self.dll.AUTDGeometryNumDevices.restype = ctypes.c_uint32

        self.dll.AUTDRotationFromEulerZYZ.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDRotationFromEulerZYZ.restype = None

        self.dll.AUTDTransducer.argtypes = [DevicePtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDTransducer.restype = TransducerPtr

        self.dll.AUTDTransducerPosition.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerPosition.restype = None

        self.dll.AUTDTransducerRotation.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerRotation.restype = None

        self.dll.AUTDTransducerDirectionX.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionX.restype = None

        self.dll.AUTDTransducerDirectionY.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionY.restype = None

        self.dll.AUTDTransducerDirectionZ.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionZ.restype = None

        self.dll.AUTDTransducerWavelength.argtypes = [TransducerPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDTransducerWavelength.restype = ctypes.c_double

        self.dll.AUTDControllerBuilder.argtypes = [] 
        self.dll.AUTDControllerBuilder.restype = ControllerBuilderPtr

        self.dll.AUTDControllerBuilderAddDevice.argtypes = [ControllerBuilderPtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDControllerBuilderAddDevice.restype = ControllerBuilderPtr

        self.dll.AUTDControllerOpen.argtypes = [ControllerBuilderPtr, LinkBuilderPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerOpen.restype = ResultController

        self.dll.AUTDControllerClose.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerClose.restype = ResultI32

        self.dll.AUTDControllerDelete.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerDelete.restype = ResultI32

        self.dll.AUTDControllerFPGAState.argtypes = [ControllerPtr, ctypes.POINTER(ctypes.c_int32)]  # type: ignore 
        self.dll.AUTDControllerFPGAState.restype = ResultI32

        self.dll.AUTDControllerFirmwareInfoListPointer.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoListPointer.restype = ResultFirmwareInfoList

        self.dll.AUTDControllerFirmwareInfoGet.argtypes = [FirmwareInfoListPtr, ctypes.c_uint32, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoGet.restype = None

        self.dll.AUTDControllerFirmwareInfoListPointerDelete.argtypes = [FirmwareInfoListPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoListPointerDelete.restype = None

        self.dll.AUTDFirmwareLatest.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDFirmwareLatest.restype = None

        self.dll.AUTDControllerSend.argtypes = [ControllerPtr, DatagramPtr, DatagramPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerSend.restype = ResultI32

        self.dll.AUTDControllerGroupCreateKVMap.argtypes = [] 
        self.dll.AUTDControllerGroupCreateKVMap.restype = GroupKVMapPtr

        self.dll.AUTDControllerGroupKVMapSet.argtypes = [GroupKVMapPtr, ctypes.c_int32, DatagramPtr, DatagramPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerGroupKVMapSet.restype = ResultGroupKVMap

        self.dll.AUTDControllerGroup.argtypes = [ControllerPtr, ctypes.POINTER(ctypes.c_int32), GroupKVMapPtr]  # type: ignore 
        self.dll.AUTDControllerGroup.restype = ResultI32

        self.dll.AUTDLinkAudit.argtypes = [] 
        self.dll.AUTDLinkAudit.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditWithTimeout.argtypes = [LinkAuditBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkAuditWithTimeout.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditIntoBuilder.argtypes = [LinkAuditBuilderPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIntoBuilder.restype = LinkBuilderPtr

        self.dll.AUTDLinkAuditIsOpen.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIsOpen.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditTimeoutNs.restype = ctypes.c_uint64

        self.dll.AUTDLinkAuditLastTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditLastTimeoutNs.restype = ctypes.c_int64

        self.dll.AUTDLinkAuditDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditDown.restype = None

        self.dll.AUTDLinkAuditBreakDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditBreakDown.restype = None

        self.dll.AUTDLinkAuditCpuNumTransducers.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaIsForceFan.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsForceFan.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaCurrentStmSegment.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaCurrentStmSegment.restype = Segment

        self.dll.AUTDLinkAuditFpgaCurrentModSegment.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaCurrentModSegment.restype = Segment

        self.dll.AUTDLinkAuditFpgaIsStmGainMode.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsStmGainMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaDebugOutputIdx.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDebugOutputIdx.restype = ctypes.c_uint8

        self.dll.AUTDLinkAuditFpgaStmFrequencyDivision.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaStmCycle.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmCycle.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaSoundSpeed.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSoundSpeed.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaStmLoopBehavior.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmLoopBehavior.restype = LoopBehavior

        self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaModulationCycle.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationCycle.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaModulation.argtypes = [LinkPtr, Segment, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulation.restype = None

        self.dll.AUTDLinkAuditFpgaModulationLoopBehavior.argtypes = [LinkPtr, Segment, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationLoopBehavior.restype = LoopBehavior

        self.dll.AUTDLinkAuditFpgaDrives.argtypes = [LinkPtr, Segment, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8), ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDrives.restype = None

        self.dll.AUTDLinkAuditFpgaPhaseFilter.argtypes = [LinkPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaPhaseFilter.restype = None

        self.dll.AUTDLinkGet.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDLinkGet.restype = LinkPtr

        self.dll.AUTDLinkNop.argtypes = [] 
        self.dll.AUTDLinkNop.restype = LinkBuilderPtr

        self.dll.AUTDModulationCustom.argtypes = [SamplingConfiguration, ctypes.POINTER(ctypes.c_uint8), ctypes.c_uint64, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationCustom.restype = ModulationPtr

        self.dll.AUTDModulationFourier.argtypes = [ctypes.POINTER(ModulationPtr), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDModulationFourier.restype = ModulationPtr

        self.dll.AUTDModulationSamplingConfig.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSamplingConfig.restype = SamplingConfiguration

        self.dll.AUTDModulationIntoDatagramWithSegment.argtypes = [ModulationPtr, Segment, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDModulationIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDModulationIntoDatagram.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationIntoDatagram.restype = DatagramPtr

        self.dll.AUTDModulationSize.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSize.restype = ResultI32

        self.dll.AUTDModulationCalc.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationCalc.restype = ResultModulationCalc

        self.dll.AUTDModulationCalcGetResult.argtypes = [ModulationCalcPtr, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDModulationCalcGetResult.restype = None

        self.dll.AUTDDatagramChangeModulationSegment.argtypes = [Segment]  # type: ignore 
        self.dll.AUTDDatagramChangeModulationSegment.restype = DatagramPtr

        self.dll.AUTDModulationWithRadiationPressure.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationWithRadiationPressure.restype = ModulationPtr

        self.dll.AUTDModulationSine.argtypes = [ctypes.c_double, SamplingConfiguration, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_uint8, SamplingMode, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSine.restype = ModulationPtr

        self.dll.AUTDModulationSineIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSineIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationSquare.argtypes = [ctypes.c_double, SamplingConfiguration, ctypes.c_uint8, ctypes.c_uint8, ctypes.c_double, SamplingMode, LoopBehavior]  # type: ignore 
        self.dll.AUTDModulationSquare.restype = ModulationPtr

        self.dll.AUTDModulationSquareIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSquareIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationStatic.argtypes = [ctypes.c_uint8] 
        self.dll.AUTDModulationStatic.restype = ModulationPtr

        self.dll.AUTDModulationStaticIsDefault.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationStaticIsDefault.restype = ctypes.c_bool

        self.dll.AUTDModulationWithTransform.argtypes = [ModulationPtr, ctypes.c_void_p, ctypes.c_void_p]  # type: ignore 
        self.dll.AUTDModulationWithTransform.restype = ModulationPtr

        self.dll.AUTDSTMFocus.argtypes = [STMPropsPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_uint8), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMFocus.restype = ResultFocusSTM

        self.dll.AUTDSTMFocusIntoDatagramWithSegment.argtypes = [FocusSTMPtr, Segment, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDSTMFocusIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDSTMFocusIntoDatagram.argtypes = [FocusSTMPtr]  # type: ignore 
        self.dll.AUTDSTMFocusIntoDatagram.restype = DatagramPtr

        self.dll.AUTDDatagramChangeFocusSTMSegment.argtypes = [Segment]  # type: ignore 
        self.dll.AUTDDatagramChangeFocusSTMSegment.restype = DatagramPtr

        self.dll.AUTDSTMGain.argtypes = [STMPropsPtr, ctypes.POINTER(GainPtr), ctypes.c_uint32, GainSTMMode]  # type: ignore 
        self.dll.AUTDSTMGain.restype = ResultGainSTM

        self.dll.AUTDSTMGainIntoDatagramWithSegment.argtypes = [GainSTMPtr, Segment, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDSTMGainIntoDatagramWithSegment.restype = DatagramPtr

        self.dll.AUTDSTMGainIntoDatagram.argtypes = [GainSTMPtr]  # type: ignore 
        self.dll.AUTDSTMGainIntoDatagram.restype = DatagramPtr

        self.dll.AUTDDatagramChangeGainSTMSegment.argtypes = [Segment]  # type: ignore 
        self.dll.AUTDDatagramChangeGainSTMSegment.restype = DatagramPtr

        self.dll.AUTDSTMPropsFromFreq.argtypes = [ctypes.c_double] 
        self.dll.AUTDSTMPropsFromFreq.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFromPeriod.argtypes = [ctypes.c_uint64] 
        self.dll.AUTDSTMPropsFromPeriod.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFromSamplingConfig.argtypes = [SamplingConfiguration]  # type: ignore 
        self.dll.AUTDSTMPropsFromSamplingConfig.restype = STMPropsPtr

        self.dll.AUTDSTMPropsWithLoopBehavior.argtypes = [STMPropsPtr, LoopBehavior]  # type: ignore 
        self.dll.AUTDSTMPropsWithLoopBehavior.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFrequency.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsFrequency.restype = ctypes.c_double

        self.dll.AUTDSTMPropsPeriod.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsPeriod.restype = ctypes.c_uint64

        self.dll.AUTDSTMPropsSamplingConfig.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsSamplingConfig.restype = ResultSamplingConfig

    def datagram_clear(self) -> DatagramPtr:
        return self.dll.AUTDDatagramClear()

    def datagram_configure_debug_output_idx(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureDebugOutputIdx(f, context, geometry)

    def datagram_configure_force_fan(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureForceFan(f, context, geometry)

    def datagram_configure_phase_filter(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigurePhaseFilter(f, context, geometry)

    def datagram_configure_reads_fpga_state(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureReadsFPGAState(f, context, geometry)

    def datagram_silencer_fixed_update_rate(self, value_intensity: int, value_phase: int) -> ResultDatagram:
        return self.dll.AUTDDatagramSilencerFixedUpdateRate(value_intensity, value_phase)

    def datagram_silencer_fixed_completion_steps(self, value_intensity: int, value_phase: int, strict_mode: bool) -> ResultDatagram:
        return self.dll.AUTDDatagramSilencerFixedCompletionSteps(value_intensity, value_phase, strict_mode)

    def datagram_silencer_fixed_completion_steps_is_default(self, silencer: DatagramPtr) -> ctypes.c_bool:
        return self.dll.AUTDDatagramSilencerFixedCompletionStepsIsDefault(silencer)

    def datagram_synchronize(self) -> DatagramPtr:
        return self.dll.AUTDDatagramSynchronize()

    def gain_bessel(self, x: float, y: float, z: float, nx: float, ny: float, nz: float, theta_z: float, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainBessel(x, y, z, nx, ny, nz, theta_z, intensity, phase_offset)

    def gain_bessel_is_default(self, bessel: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainBesselIsDefault(bessel)

    def gain_custom(self) -> GainPtr:
        return self.dll.AUTDGainCustom()

    def gain_custom_set(self, custom: GainPtr, dev_idx: int, ptr: ctypes.Array | None, len: int) -> GainPtr:
        return self.dll.AUTDGainCustomSet(custom, dev_idx, ptr, len)

    def gain_focus(self, x: float, y: float, z: float, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainFocus(x, y, z, intensity, phase_offset)

    def gain_focus_is_default(self, focus: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainFocusIsDefault(focus)

    def gain_group_create_map(self, device_indices_ptr: ctypes.Array[ctypes.c_uint32] | None, num_devices: int) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupCreateMap(device_indices_ptr, num_devices)

    def gain_group_map_set(self, map: GroupGainMapPtr, dev_idx: int, map_data: ctypes.Array[ctypes.c_int32] | None) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupMapSet(map, dev_idx, map_data)

    def gain_group(self, map: GroupGainMapPtr, keys_ptr: ctypes.Array[ctypes.c_int32] | None, values_ptr: ctypes.Array | None, kv_len: int) -> GainPtr:
        return self.dll.AUTDGainGroup(map, keys_ptr, values_ptr, kv_len)

    def gain_into_datagram_with_segment(self, gain: GainPtr, segment: Segment, update_segment: bool) -> DatagramPtr:
        return self.dll.AUTDGainIntoDatagramWithSegment(gain, segment, update_segment)

    def gain_into_datagram(self, gain: GainPtr) -> DatagramPtr:
        return self.dll.AUTDGainIntoDatagram(gain)

    def gain_calc(self, gain: GainPtr, geometry: GeometryPtr) -> ResultGainCalcDrivesMap:
        return self.dll.AUTDGainCalc(gain, geometry)

    def gain_calc_get_result(self, src: GainCalcDrivesMapPtr, dst: ctypes.Array | None, idx: int) -> None:
        return self.dll.AUTDGainCalcGetResult(src, dst, idx)

    def gain_calc_free_result(self, src: GainCalcDrivesMapPtr) -> None:
        return self.dll.AUTDGainCalcFreeResult(src)

    def datagram_change_gain_segment(self, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDDatagramChangeGainSegment(segment)

    def gain_null(self) -> GainPtr:
        return self.dll.AUTDGainNull()

    def gain_plane(self, nx: float, ny: float, nz: float, intensity: int, phase_offset: int) -> GainPtr:
        return self.dll.AUTDGainPlane(nx, ny, nz, intensity, phase_offset)

    def gain_planel_is_default(self, plane: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainPlanelIsDefault(plane)

    def gain_transducer_test(self, f: ctypes.c_void_p | None, context: ContextPtr, geometry: GeometryPtr) -> GainPtr:
        return self.dll.AUTDGainTransducerTest(f, context, geometry)

    def gain_uniform(self, intensity: int, phase: int) -> GainPtr:
        return self.dll.AUTDGainUniform(intensity, phase)

    def gain_uniform_is_default(self, uniform: GainPtr) -> ctypes.c_bool:
        return self.dll.AUTDGainUniformIsDefault(uniform)

    def device(self, geo: GeometryPtr, dev_idx: int) -> DevicePtr:
        return self.dll.AUTDDevice(geo, dev_idx)

    def device_num_transducers(self, dev: DevicePtr) -> ctypes.c_uint32:
        return self.dll.AUTDDeviceNumTransducers(dev)

    def device_get_sound_speed(self, dev: DevicePtr) -> ctypes.c_double:
        return self.dll.AUTDDeviceGetSoundSpeed(dev)

    def device_set_sound_speed(self, dev: DevicePtr, value: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeed(dev, value)

    def device_set_sound_speed_from_temp(self, dev: DevicePtr, temp: float, k: float, r: float, m: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeedFromTemp(dev, temp, k, r, m)

    def device_get_attenuation(self, dev: DevicePtr) -> ctypes.c_double:
        return self.dll.AUTDDeviceGetAttenuation(dev)

    def device_set_attenuation(self, dev: DevicePtr, value: float) -> None:
        return self.dll.AUTDDeviceSetAttenuation(dev, value)

    def device_center(self, dev: DevicePtr, center: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDDeviceCenter(dev, center)

    def device_translate(self, dev: DevicePtr, x: float, y: float, z: float) -> None:
        return self.dll.AUTDDeviceTranslate(dev, x, y, z)

    def device_rotate(self, dev: DevicePtr, w: float, i: float, j: float, k: float) -> None:
        return self.dll.AUTDDeviceRotate(dev, w, i, j, k)

    def device_affine(self, dev: DevicePtr, x: float, y: float, z: float, w: float, i: float, j: float, k: float) -> None:
        return self.dll.AUTDDeviceAffine(dev, x, y, z, w, i, j, k)

    def device_enable_set(self, dev: DevicePtr, value: bool) -> None:
        return self.dll.AUTDDeviceEnableSet(dev, value)

    def device_enable_get(self, dev: DevicePtr) -> ctypes.c_bool:
        return self.dll.AUTDDeviceEnableGet(dev)

    def geometry(self, cnt: ControllerPtr) -> GeometryPtr:
        return self.dll.AUTDGeometry(cnt)

    def geometry_num_devices(self, geo: GeometryPtr) -> ctypes.c_uint32:
        return self.dll.AUTDGeometryNumDevices(geo)

    def rotation_from_euler_zyz(self, x: float, y: float, z: float, rot: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDRotationFromEulerZYZ(x, y, z, rot)

    def transducer(self, dev: DevicePtr, idx: int) -> TransducerPtr:
        return self.dll.AUTDTransducer(dev, idx)

    def transducer_position(self, tr: TransducerPtr, pos: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerPosition(tr, pos)

    def transducer_rotation(self, tr: TransducerPtr, rot: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerRotation(tr, rot)

    def transducer_direction_x(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionX(tr, dir)

    def transducer_direction_y(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionY(tr, dir)

    def transducer_direction_z(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionZ(tr, dir)

    def transducer_wavelength(self, tr: TransducerPtr, sound_speed: float) -> ctypes.c_double:
        return self.dll.AUTDTransducerWavelength(tr, sound_speed)

    def controller_builder(self) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilder()

    def controller_builder_add_device(self, builder: ControllerBuilderPtr, x: float, y: float, z: float, qw: float, qx: float, qy: float, qz: float) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilderAddDevice(builder, x, y, z, qw, qx, qy, qz)

    def controller_open(self, builder: ControllerBuilderPtr, link_builder: LinkBuilderPtr, timeout_ns: int) -> ResultController:
        return self.dll.AUTDControllerOpen(builder, link_builder, timeout_ns)

    def controller_close(self, cnt: ControllerPtr) -> ResultI32:
        return self.dll.AUTDControllerClose(cnt)

    def controller_delete(self, cnt: ControllerPtr) -> ResultI32:
        return self.dll.AUTDControllerDelete(cnt)

    def controller_fpga_state(self, cnt: ControllerPtr, out: ctypes.Array[ctypes.c_int32] | None) -> ResultI32:
        return self.dll.AUTDControllerFPGAState(cnt, out)

    def controller_firmware_info_list_pointer(self, cnt: ControllerPtr) -> ResultFirmwareInfoList:
        return self.dll.AUTDControllerFirmwareInfoListPointer(cnt)

    def controller_firmware_info_get(self, p_info_list: FirmwareInfoListPtr, idx: int, info: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDControllerFirmwareInfoGet(p_info_list, idx, info)

    def controller_firmware_info_list_pointer_delete(self, p_info_list: FirmwareInfoListPtr) -> None:
        return self.dll.AUTDControllerFirmwareInfoListPointerDelete(p_info_list)

    def firmware_latest(self, latest: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDFirmwareLatest(latest)

    def controller_send(self, cnt: ControllerPtr, d1: DatagramPtr, d2: DatagramPtr, timeout_ns: int) -> ResultI32:
        return self.dll.AUTDControllerSend(cnt, d1, d2, timeout_ns)

    def controller_group_create_kv_map(self) -> GroupKVMapPtr:
        return self.dll.AUTDControllerGroupCreateKVMap()

    def controller_group_kv_map_set(self, map: GroupKVMapPtr, key: int, d1: DatagramPtr, d2: DatagramPtr, timeout_ns: int) -> ResultGroupKVMap:
        return self.dll.AUTDControllerGroupKVMapSet(map, key, d1, d2, timeout_ns)

    def controller_group(self, cnt: ControllerPtr, map: ctypes.Array[ctypes.c_int32] | None, kv_map: GroupKVMapPtr) -> ResultI32:
        return self.dll.AUTDControllerGroup(cnt, map, kv_map)

    def link_audit(self) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAudit()

    def link_audit_with_timeout(self, audit: LinkAuditBuilderPtr, timeout_ns: int) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAuditWithTimeout(audit, timeout_ns)

    def link_audit_into_builder(self, audit: LinkAuditBuilderPtr) -> LinkBuilderPtr:
        return self.dll.AUTDLinkAuditIntoBuilder(audit)

    def link_audit_is_open(self, audit: LinkPtr) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditIsOpen(audit)

    def link_audit_timeout_ns(self, audit: LinkPtr) -> ctypes.c_uint64:
        return self.dll.AUTDLinkAuditTimeoutNs(audit)

    def link_audit_last_timeout_ns(self, audit: LinkPtr) -> ctypes.c_int64:
        return self.dll.AUTDLinkAuditLastTimeoutNs(audit)

    def link_audit_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditDown(audit)

    def link_audit_break_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditBreakDown(audit)

    def link_audit_cpu_num_transducers(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditCpuNumTransducers(audit, idx)

    def link_audit_fpga_assert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaAssertThermalSensor(audit, idx)

    def link_audit_fpga_deassert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaDeassertThermalSensor(audit, idx)

    def link_audit_fpga_is_force_fan(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsForceFan(audit, idx)

    def link_audit_fpga_current_stm_segment(self, audit: LinkPtr, idx: int) -> Segment:
        return self.dll.AUTDLinkAuditFpgaCurrentStmSegment(audit, idx)

    def link_audit_fpga_current_mod_segment(self, audit: LinkPtr, idx: int) -> Segment:
        return self.dll.AUTDLinkAuditFpgaCurrentModSegment(audit, idx)

    def link_audit_fpga_is_stm_gain_mode(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsStmGainMode(audit, segment, idx)

    def link_audit_fpga_silencer_update_rate_intensity(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerUpdateRateIntensity(audit, idx)

    def link_audit_fpga_silencer_update_rate_phase(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerUpdateRatePhase(audit, idx)

    def link_audit_fpga_silencer_completion_steps_intensity(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(audit, idx)

    def link_audit_fpga_silencer_completion_steps_phase(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerCompletionStepsPhase(audit, idx)

    def link_audit_fpga_silencer_fixed_completion_steps_mode(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(audit, idx)

    def link_audit_fpga_debug_output_idx(self, audit: LinkPtr, idx: int) -> ctypes.c_uint8:
        return self.dll.AUTDLinkAuditFpgaDebugOutputIdx(audit, idx)

    def link_audit_fpga_stm_frequency_division(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaStmFrequencyDivision(audit, segment, idx)

    def link_audit_fpga_stm_cycle(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaStmCycle(audit, segment, idx)

    def link_audit_fpga_sound_speed(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaSoundSpeed(audit, segment, idx)

    def link_audit_fpga_stm_loop_behavior(self, audit: LinkPtr, segment: Segment, idx: int) -> LoopBehavior:
        return self.dll.AUTDLinkAuditFpgaStmLoopBehavior(audit, segment, idx)

    def link_audit_fpga_modulation_frequency_division(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision(audit, segment, idx)

    def link_audit_fpga_modulation_cycle(self, audit: LinkPtr, segment: Segment, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaModulationCycle(audit, segment, idx)

    def link_audit_fpga_modulation(self, audit: LinkPtr, segment: Segment, idx: int, data: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaModulation(audit, segment, idx, data)

    def link_audit_fpga_modulation_loop_behavior(self, audit: LinkPtr, segment: Segment, idx: int) -> LoopBehavior:
        return self.dll.AUTDLinkAuditFpgaModulationLoopBehavior(audit, segment, idx)

    def link_audit_fpga_drives(self, audit: LinkPtr, segment: Segment, idx: int, stm_idx: int, intensities: ctypes.Array[ctypes.c_uint8] | None, phases: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaDrives(audit, segment, idx, stm_idx, intensities, phases)

    def link_audit_fpga_phase_filter(self, audit: LinkPtr, idx: int, phase_filter: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaPhaseFilter(audit, idx, phase_filter)

    def link_get(self, cnt: ControllerPtr) -> LinkPtr:
        return self.dll.AUTDLinkGet(cnt)

    def link_nop(self) -> LinkBuilderPtr:
        return self.dll.AUTDLinkNop()

    def modulation_custom(self, config: SamplingConfiguration, ptr: ctypes.Array[ctypes.c_uint8] | None, len: int, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationCustom(config, ptr, len, loop_behavior)

    def modulation_fourier(self, components: ctypes.Array | None, size: int) -> ModulationPtr:
        return self.dll.AUTDModulationFourier(components, size)

    def modulation_sampling_config(self, m: ModulationPtr) -> SamplingConfiguration:
        return self.dll.AUTDModulationSamplingConfig(m)

    def modulation_into_datagram_with_segment(self, m: ModulationPtr, segment: Segment, update_segment: bool) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagramWithSegment(m, segment, update_segment)

    def modulation_into_datagram(self, m: ModulationPtr) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagram(m)

    def modulation_size(self, m: ModulationPtr) -> ResultI32:
        return self.dll.AUTDModulationSize(m)

    def modulation_calc(self, m: ModulationPtr) -> ResultModulationCalc:
        return self.dll.AUTDModulationCalc(m)

    def modulation_calc_get_result(self, src: ModulationCalcPtr, dst: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDModulationCalcGetResult(src, dst)

    def datagram_change_modulation_segment(self, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDDatagramChangeModulationSegment(segment)

    def modulation_with_radiation_pressure(self, m: ModulationPtr) -> ModulationPtr:
        return self.dll.AUTDModulationWithRadiationPressure(m)

    def modulation_sine(self, freq: float, config: SamplingConfiguration, intensity: int, offset: int, phase: int, mode: SamplingMode, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSine(freq, config, intensity, offset, phase, mode, loop_behavior)

    def modulation_sine_is_default(self, sine: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationSineIsDefault(sine)

    def modulation_square(self, freq: float, config: SamplingConfiguration, low: int, high: int, duty: float, mode: SamplingMode, loop_behavior: LoopBehavior) -> ModulationPtr:
        return self.dll.AUTDModulationSquare(freq, config, low, high, duty, mode, loop_behavior)

    def modulation_square_is_default(self, square: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationSquareIsDefault(square)

    def modulation_static(self, intensity: int) -> ModulationPtr:
        return self.dll.AUTDModulationStatic(intensity)

    def modulation_static_is_default(self, s: ModulationPtr) -> ctypes.c_bool:
        return self.dll.AUTDModulationStaticIsDefault(s)

    def modulation_with_transform(self, m: ModulationPtr, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None) -> ModulationPtr:
        return self.dll.AUTDModulationWithTransform(m, f, context)

    def stm_focus(self, props: STMPropsPtr, points: ctypes.Array[ctypes.c_double] | None, intensities: ctypes.Array[ctypes.c_uint8] | None, size: int) -> ResultFocusSTM:
        return self.dll.AUTDSTMFocus(props, points, intensities, size)

    def stm_focus_into_datagram_with_segment(self, stm: FocusSTMPtr, segment: Segment, update_segment: bool) -> DatagramPtr:
        return self.dll.AUTDSTMFocusIntoDatagramWithSegment(stm, segment, update_segment)

    def stm_focus_into_datagram(self, stm: FocusSTMPtr) -> DatagramPtr:
        return self.dll.AUTDSTMFocusIntoDatagram(stm)

    def datagram_change_focus_stm_segment(self, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDDatagramChangeFocusSTMSegment(segment)

    def stm_gain(self, props: STMPropsPtr, gains: ctypes.Array | None, size: int, mode: GainSTMMode) -> ResultGainSTM:
        return self.dll.AUTDSTMGain(props, gains, size, mode)

    def stm_gain_into_datagram_with_segment(self, stm: GainSTMPtr, segment: Segment, update_segment: bool) -> DatagramPtr:
        return self.dll.AUTDSTMGainIntoDatagramWithSegment(stm, segment, update_segment)

    def stm_gain_into_datagram(self, stm: GainSTMPtr) -> DatagramPtr:
        return self.dll.AUTDSTMGainIntoDatagram(stm)

    def datagram_change_gain_stm_segment(self, segment: Segment) -> DatagramPtr:
        return self.dll.AUTDDatagramChangeGainSTMSegment(segment)

    def stm_props_from_freq(self, freq: float) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsFromFreq(freq)

    def stm_props_from_period(self, p: int) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsFromPeriod(p)

    def stm_props_from_sampling_config(self, config: SamplingConfiguration) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsFromSamplingConfig(config)

    def stm_props_with_loop_behavior(self, props: STMPropsPtr, loop_behavior: LoopBehavior) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsWithLoopBehavior(props, loop_behavior)

    def stm_props_frequency(self, props: STMPropsPtr, size: int) -> ctypes.c_double:
        return self.dll.AUTDSTMPropsFrequency(props, size)

    def stm_props_period(self, props: STMPropsPtr, size: int) -> ctypes.c_uint64:
        return self.dll.AUTDSTMPropsPeriod(props, size)

    def stm_props_sampling_config(self, props: STMPropsPtr, size: int) -> ResultSamplingConfig:
        return self.dll.AUTDSTMPropsSamplingConfig(props, size)
