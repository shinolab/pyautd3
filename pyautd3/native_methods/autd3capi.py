# This file is autogenerated
import threading
import ctypes
import os
from pyautd3.native_methods.autd3capi_def import CachePtr, ControllerPtr, DatagramPtr, DevicePtr, Drive, FirmwareInfoListPtr, GainCalcDrivesMapPtr, GainPtr, GainSTMMode, GeometryPtr, GroupGainMapPtr, GroupKVMapPtr, LinkBuilderPtr, LinkPtr, ModulationPtr, ResultController, ResultDatagram, ResultGainCalcDrivesMap, ResultI32, ResultSamplingConfig, STMPropsPtr, SamplingConfiguration, TransducerPtr

from enum import IntEnum

class SamplingMode(IntEnum):
    ExactFrequency = 0
    SizeOptimized = 1

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class ContextPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ControllerBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class LinkAuditBuilderPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ResultFirmwareInfoList(ctypes.Structure):
    _fields_ = [("result", FirmwareInfoListPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultGroupKVMap(ctypes.Structure):
    _fields_ = [("result", GroupKVMapPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultCache(ctypes.Structure):
    _fields_ = [("result", CachePtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDGainBessel.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainBessel.restype = GainPtr

        self.dll.AUTDGainBesselWithIntensity.argtypes = [GainPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainBesselWithIntensity.restype = GainPtr

        self.dll.AUTDGainCustom.argtypes = [] 
        self.dll.AUTDGainCustom.restype = GainPtr

        self.dll.AUTDGainCustomSet.argtypes = [GainPtr, ctypes.c_uint32, ctypes.POINTER(Drive), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainCustomSet.restype = GainPtr

        self.dll.AUTDGainFocus.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainFocus.restype = GainPtr

        self.dll.AUTDGainFocusWithIntensity.argtypes = [GainPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainFocusWithIntensity.restype = GainPtr

        self.dll.AUTDGainGroupCreateMap.argtypes = [ctypes.POINTER(ctypes.c_uint32), ctypes.c_uint32] 
        self.dll.AUTDGainGroupCreateMap.restype = GroupGainMapPtr

        self.dll.AUTDGainGroupMapSet.argtypes = [GroupGainMapPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_int32)]  # type: ignore 
        self.dll.AUTDGainGroupMapSet.restype = GroupGainMapPtr

        self.dll.AUTDGainGroup.argtypes = [GroupGainMapPtr, ctypes.POINTER(ctypes.c_int32), ctypes.POINTER(GainPtr), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainGroup.restype = GainPtr

        self.dll.AUTDGainIntoDatagram.argtypes = [GainPtr]  # type: ignore 
        self.dll.AUTDGainIntoDatagram.restype = DatagramPtr

        self.dll.AUTDGainCalc.argtypes = [GainPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainCalc.restype = ResultGainCalcDrivesMap

        self.dll.AUTDGainCalcGetResult.argtypes = [GainCalcDrivesMapPtr, ctypes.POINTER(Drive), ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainCalcGetResult.restype = None

        self.dll.AUTDGainCalcFreeResult.argtypes = [GainCalcDrivesMapPtr]  # type: ignore 
        self.dll.AUTDGainCalcFreeResult.restype = None

        self.dll.AUTDGainNull.argtypes = [] 
        self.dll.AUTDGainNull.restype = GainPtr

        self.dll.AUTDGainPlane.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainPlane.restype = GainPtr

        self.dll.AUTDGainPlaneWithIntensity.argtypes = [GainPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainPlaneWithIntensity.restype = GainPtr

        self.dll.AUTDGainTransducerTest.argtypes = [ctypes.c_void_p, ContextPtr, GeometryPtr]  # type: ignore 
        self.dll.AUTDGainTransducerTest.restype = GainPtr

        self.dll.AUTDGainUniform.argtypes = [ctypes.c_uint8] 
        self.dll.AUTDGainUniform.restype = GainPtr

        self.dll.AUTDGainUniformWithPhase.argtypes = [GainPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDGainUniformWithPhase.restype = GainPtr

        self.dll.AUTDDevice.argtypes = [GeometryPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDDevice.restype = DevicePtr

        self.dll.AUTDDeviceNumTransducers.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDDeviceGetSoundSpeed.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceGetSoundSpeed.restype = ctypes.c_double

        self.dll.AUTDDeviceSetSoundSpeed.argtypes = [DevicePtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeed.restype = None

        self.dll.AUTDDeviceSetSoundSpeedFromTemp.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetSoundSpeedFromTemp.restype = None

        self.dll.AUTDDeviceGetAttenuation.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceGetAttenuation.restype = ctypes.c_double

        self.dll.AUTDDeviceSetAttenuation.argtypes = [DevicePtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceSetAttenuation.restype = None

        self.dll.AUTDDeviceCenter.argtypes = [DevicePtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDDeviceCenter.restype = None

        self.dll.AUTDDeviceTranslate.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceTranslate.restype = None

        self.dll.AUTDDeviceRotate.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceRotate.restype = None

        self.dll.AUTDDeviceAffine.argtypes = [DevicePtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDDeviceAffine.restype = None

        self.dll.AUTDDeviceEnableSet.argtypes = [DevicePtr, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDDeviceEnableSet.restype = None

        self.dll.AUTDDeviceEnableGet.argtypes = [DevicePtr]  # type: ignore 
        self.dll.AUTDDeviceEnableGet.restype = ctypes.c_bool

        self.dll.AUTDGeometry.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDGeometry.restype = GeometryPtr

        self.dll.AUTDGeometryNumDevices.argtypes = [GeometryPtr]  # type: ignore 
        self.dll.AUTDGeometryNumDevices.restype = ctypes.c_uint32

        self.dll.AUTDRotationFromEulerZYZ.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDRotationFromEulerZYZ.restype = None

        self.dll.AUTDTransducer.argtypes = [DevicePtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDTransducer.restype = TransducerPtr

        self.dll.AUTDTransducerPosition.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerPosition.restype = None

        self.dll.AUTDTransducerRotation.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerRotation.restype = None

        self.dll.AUTDTransducerDirectionX.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionX.restype = None

        self.dll.AUTDTransducerDirectionY.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionY.restype = None

        self.dll.AUTDTransducerDirectionZ.argtypes = [TransducerPtr, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDTransducerDirectionZ.restype = None

        self.dll.AUTDTransducerWavelength.argtypes = [TransducerPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDTransducerWavelength.restype = ctypes.c_double

        self.dll.AUTDControllerBuilder.argtypes = [] 
        self.dll.AUTDControllerBuilder.restype = ControllerBuilderPtr

        self.dll.AUTDControllerBuilderAddDevice.argtypes = [ControllerBuilderPtr, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]  # type: ignore 
        self.dll.AUTDControllerBuilderAddDevice.restype = ControllerBuilderPtr

        self.dll.AUTDControllerOpenWith.argtypes = [ControllerBuilderPtr, LinkBuilderPtr]  # type: ignore 
        self.dll.AUTDControllerOpenWith.restype = ResultController

        self.dll.AUTDControllerClose.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerClose.restype = ResultI32

        self.dll.AUTDControllerDelete.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerDelete.restype = None

        self.dll.AUTDControllerFPGAInfo.argtypes = [ControllerPtr, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDControllerFPGAInfo.restype = ResultI32

        self.dll.AUTDControllerFirmwareInfoListPointer.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoListPointer.restype = ResultFirmwareInfoList

        self.dll.AUTDControllerFirmwareInfoGet.argtypes = [FirmwareInfoListPtr, ctypes.c_uint32, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoGet.restype = None

        self.dll.AUTDControllerFirmwareInfoListPointerDelete.argtypes = [FirmwareInfoListPtr]  # type: ignore 
        self.dll.AUTDControllerFirmwareInfoListPointerDelete.restype = None

        self.dll.AUTDFirmwareLatest.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDFirmwareLatest.restype = None

        self.dll.AUTDDatagramSynchronize.argtypes = [] 
        self.dll.AUTDDatagramSynchronize.restype = DatagramPtr

        self.dll.AUTDDatagramClear.argtypes = [] 
        self.dll.AUTDDatagramClear.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureModDelay.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureModDelay.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureDebugOutputIdx.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureDebugOutputIdx.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureForceFan.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureForceFan.restype = DatagramPtr

        self.dll.AUTDDatagramConfigureReadsFPGAInfo.argtypes = [ctypes.c_void_p, ctypes.c_void_p, GeometryPtr]  # type: ignore 
        self.dll.AUTDDatagramConfigureReadsFPGAInfo.restype = DatagramPtr

        self.dll.AUTDDatagramSilencer.argtypes = [ctypes.c_uint16, ctypes.c_uint16] 
        self.dll.AUTDDatagramSilencer.restype = ResultDatagram

        self.dll.AUTDControllerSend.argtypes = [ControllerPtr, DatagramPtr, DatagramPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerSend.restype = ResultI32

        self.dll.AUTDControllerGroupCreateKVMap.argtypes = [] 
        self.dll.AUTDControllerGroupCreateKVMap.restype = GroupKVMapPtr

        self.dll.AUTDControllerGroupKVMapSet.argtypes = [GroupKVMapPtr, ctypes.c_int32, DatagramPtr, DatagramPtr, ctypes.c_int64]  # type: ignore 
        self.dll.AUTDControllerGroupKVMapSet.restype = ResultGroupKVMap

        self.dll.AUTDControllerGroup.argtypes = [ControllerPtr, ctypes.POINTER(ctypes.c_int32), GroupKVMapPtr]  # type: ignore 
        self.dll.AUTDControllerGroup.restype = ResultI32

        self.dll.AUTDLinkAudit.argtypes = [] 
        self.dll.AUTDLinkAudit.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditWithTimeout.argtypes = [LinkAuditBuilderPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkAuditWithTimeout.restype = LinkAuditBuilderPtr

        self.dll.AUTDLinkAuditIntoBuilder.argtypes = [LinkAuditBuilderPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIntoBuilder.restype = LinkBuilderPtr

        self.dll.AUTDLinkAuditIsOpen.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditIsOpen.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditTimeoutNs.restype = ctypes.c_uint64

        self.dll.AUTDLinkAuditLastTimeoutNs.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditLastTimeoutNs.restype = ctypes.c_uint64

        self.dll.AUTDLinkAuditDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditDown.restype = None

        self.dll.AUTDLinkAuditUp.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditUp.restype = None

        self.dll.AUTDLinkAuditBreakDown.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditBreakDown.restype = None

        self.dll.AUTDLinkAuditRepair.argtypes = [LinkPtr]  # type: ignore 
        self.dll.AUTDLinkAuditRepair.restype = None

        self.dll.AUTDLinkAuditCpuUpdate.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuUpdate.restype = None

        self.dll.AUTDLinkAuditCpuIdx.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuIdx.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditCpuNumTransducers.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditCpuAck.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuAck.restype = ctypes.c_uint8

        self.dll.AUTDLinkAuditCpuRxData.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditCpuRxData.restype = ctypes.c_uint8

        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaAssertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDeassertThermalSensor.restype = None

        self.dll.AUTDLinkAuditFpgaIsForceFan.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsForceFan.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaIsStmMode.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsStmMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaIsStmGainMode.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIsStmGainMode.restype = ctypes.c_bool

        self.dll.AUTDLinkAuditFpgaSilencerStepIntensity.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerStepIntensity.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaSilencerStepPhase.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSilencerStepPhase.restype = ctypes.c_uint16

        self.dll.AUTDLinkAuditFpgaDebugOutputIdx.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaDebugOutputIdx.restype = ctypes.c_uint8

        self.dll.AUTDLinkAuditFpgaModDelays.argtypes = [LinkPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint16)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModDelays.restype = None

        self.dll.AUTDLinkAuditFpgaStmFrequencyDivision.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaStmCycle.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmCycle.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaSoundSpeed.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaSoundSpeed.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaStmStartIdx.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmStartIdx.restype = ctypes.c_int32

        self.dll.AUTDLinkAuditFpgaStmFinishIdx.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaStmFinishIdx.restype = ctypes.c_int32

        self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaModulationCycle.argtypes = [LinkPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulationCycle.restype = ctypes.c_uint32

        self.dll.AUTDLinkAuditFpgaModulation.argtypes = [LinkPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaModulation.restype = None

        self.dll.AUTDLinkAuditFpgaIntensitiesAndPhases.argtypes = [LinkPtr, ctypes.c_uint32, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8), ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkAuditFpgaIntensitiesAndPhases.restype = None

        self.dll.AUTDLinkGet.argtypes = [ControllerPtr]  # type: ignore 
        self.dll.AUTDLinkGet.restype = LinkPtr

        self.dll.AUTDLinkNop.argtypes = [] 
        self.dll.AUTDLinkNop.restype = LinkBuilderPtr

        self.dll.AUTDModulationWithCache.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationWithCache.restype = ResultCache

        self.dll.AUTDModulationCacheGetBufferLen.argtypes = [CachePtr]  # type: ignore 
        self.dll.AUTDModulationCacheGetBufferLen.restype = ctypes.c_uint32

        self.dll.AUTDModulationCacheGetBuffer.argtypes = [CachePtr, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDModulationCacheGetBuffer.restype = None

        self.dll.AUTDModulationCacheIntoModulation.argtypes = [CachePtr]  # type: ignore 
        self.dll.AUTDModulationCacheIntoModulation.restype = ModulationPtr

        self.dll.AUTDModulationCacheDelete.argtypes = [CachePtr]  # type: ignore 
        self.dll.AUTDModulationCacheDelete.restype = None

        self.dll.AUTDModulationCustom.argtypes = [SamplingConfiguration, ctypes.POINTER(ctypes.c_uint8), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDModulationCustom.restype = ModulationPtr

        self.dll.AUTDModulationFourier.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationFourier.restype = ModulationPtr

        self.dll.AUTDModulationFourierAddComponent.argtypes = [ModulationPtr, ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationFourierAddComponent.restype = ModulationPtr

        self.dll.AUTDModulationSamplingConfig.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSamplingConfig.restype = SamplingConfiguration

        self.dll.AUTDModulationIntoDatagram.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationIntoDatagram.restype = DatagramPtr

        self.dll.AUTDModulationSize.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationSize.restype = ResultI32

        self.dll.AUTDModulationWithRadiationPressure.argtypes = [ModulationPtr]  # type: ignore 
        self.dll.AUTDModulationWithRadiationPressure.restype = ModulationPtr

        self.dll.AUTDModulationSine.argtypes = [ctypes.c_double] 
        self.dll.AUTDModulationSine.restype = ModulationPtr

        self.dll.AUTDModulationSineWithSamplingConfig.argtypes = [ModulationPtr, SamplingConfiguration]  # type: ignore 
        self.dll.AUTDModulationSineWithSamplingConfig.restype = ModulationPtr

        self.dll.AUTDModulationSineWithIntensity.argtypes = [ModulationPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDModulationSineWithIntensity.restype = ModulationPtr

        self.dll.AUTDModulationSineWithPhase.argtypes = [ModulationPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDModulationSineWithPhase.restype = ModulationPtr

        self.dll.AUTDModulationSineWithOffset.argtypes = [ModulationPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDModulationSineWithOffset.restype = ModulationPtr

        self.dll.AUTDModulationSineWithMode.argtypes = [ModulationPtr, SamplingMode]  # type: ignore 
        self.dll.AUTDModulationSineWithMode.restype = ModulationPtr

        self.dll.AUTDModulationSquare.argtypes = [ctypes.c_double] 
        self.dll.AUTDModulationSquare.restype = ModulationPtr

        self.dll.AUTDModulationSquareWithLow.argtypes = [ModulationPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDModulationSquareWithLow.restype = ModulationPtr

        self.dll.AUTDModulationSquareWithHigh.argtypes = [ModulationPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDModulationSquareWithHigh.restype = ModulationPtr

        self.dll.AUTDModulationSquareWithDuty.argtypes = [ModulationPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDModulationSquareWithDuty.restype = ModulationPtr

        self.dll.AUTDModulationSquareWithSamplingConfig.argtypes = [ModulationPtr, SamplingConfiguration]  # type: ignore 
        self.dll.AUTDModulationSquareWithSamplingConfig.restype = ModulationPtr

        self.dll.AUTDModulationSquareWithMode.argtypes = [ModulationPtr, SamplingMode]  # type: ignore 
        self.dll.AUTDModulationSquareWithMode.restype = ModulationPtr

        self.dll.AUTDModulationStatic.argtypes = [] 
        self.dll.AUTDModulationStatic.restype = ModulationPtr

        self.dll.AUTDModulationStaticWithIntensity.argtypes = [ModulationPtr, ctypes.c_uint8]  # type: ignore 
        self.dll.AUTDModulationStaticWithIntensity.restype = ModulationPtr

        self.dll.AUTDModulationWithTransform.argtypes = [ModulationPtr, ctypes.c_void_p, ctypes.c_void_p]  # type: ignore 
        self.dll.AUTDModulationWithTransform.restype = ModulationPtr

        self.dll.AUTDSTMFocus.argtypes = [STMPropsPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_uint8), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMFocus.restype = ResultDatagram

        self.dll.AUTDSTMGain.argtypes = [STMPropsPtr, ctypes.POINTER(GainPtr), ctypes.c_uint32, GainSTMMode]  # type: ignore 
        self.dll.AUTDSTMGain.restype = ResultDatagram

        self.dll.AUTDSTMGainAddGain.argtypes = [DatagramPtr, GainPtr]  # type: ignore 
        self.dll.AUTDSTMGainAddGain.restype = ResultDatagram

        self.dll.AUTDSTMPropsNew.argtypes = [ctypes.c_double] 
        self.dll.AUTDSTMPropsNew.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFromPeriod.argtypes = [ctypes.c_uint64] 
        self.dll.AUTDSTMPropsFromPeriod.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFromSamplingConfig.argtypes = [SamplingConfiguration]  # type: ignore 
        self.dll.AUTDSTMPropsFromSamplingConfig.restype = STMPropsPtr

        self.dll.AUTDSTMPropsWithStartIdx.argtypes = [STMPropsPtr, ctypes.c_int32]  # type: ignore 
        self.dll.AUTDSTMPropsWithStartIdx.restype = STMPropsPtr

        self.dll.AUTDSTMPropsWithFinishIdx.argtypes = [STMPropsPtr, ctypes.c_int32]  # type: ignore 
        self.dll.AUTDSTMPropsWithFinishIdx.restype = STMPropsPtr

        self.dll.AUTDSTMPropsFrequency.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsFrequency.restype = ctypes.c_double

        self.dll.AUTDSTMPropsPeriod.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsPeriod.restype = ctypes.c_uint64

        self.dll.AUTDSTMPropsSamplingConfig.argtypes = [STMPropsPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDSTMPropsSamplingConfig.restype = ResultSamplingConfig

        self.dll.AUTDSTMPropsStartIdx.argtypes = [STMPropsPtr]  # type: ignore 
        self.dll.AUTDSTMPropsStartIdx.restype = ctypes.c_int32

        self.dll.AUTDSTMPropsFinishIdx.argtypes = [STMPropsPtr]  # type: ignore 
        self.dll.AUTDSTMPropsFinishIdx.restype = ctypes.c_int32

    def gain_bessel(self, x: float, y: float, z: float, nx: float, ny: float, nz: float, theta_z: float) -> GainPtr:
        return self.dll.AUTDGainBessel(x, y, z, nx, ny, nz, theta_z)

    def gain_bessel_with_intensity(self, bessel: GainPtr, intensity: int) -> GainPtr:
        return self.dll.AUTDGainBesselWithIntensity(bessel, intensity)

    def gain_custom(self) -> GainPtr:
        return self.dll.AUTDGainCustom()

    def gain_custom_set(self, custom: GainPtr, dev_idx: int, ptr: ctypes.Array | None, len: int) -> GainPtr:
        return self.dll.AUTDGainCustomSet(custom, dev_idx, ptr, len)

    def gain_focus(self, x: float, y: float, z: float) -> GainPtr:
        return self.dll.AUTDGainFocus(x, y, z)

    def gain_focus_with_intensity(self, focus: GainPtr, intensity: int) -> GainPtr:
        return self.dll.AUTDGainFocusWithIntensity(focus, intensity)

    def gain_group_create_map(self, device_indices_ptr: ctypes.Array[ctypes.c_uint32] | None, num_devices: int) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupCreateMap(device_indices_ptr, num_devices)

    def gain_group_map_set(self, map: GroupGainMapPtr, dev_idx: int, map_data: ctypes.Array[ctypes.c_int32] | None) -> GroupGainMapPtr:
        return self.dll.AUTDGainGroupMapSet(map, dev_idx, map_data)

    def gain_group(self, map: GroupGainMapPtr, keys_ptr: ctypes.Array[ctypes.c_int32] | None, values_ptr: ctypes.Array | None, kv_len: int) -> GainPtr:
        return self.dll.AUTDGainGroup(map, keys_ptr, values_ptr, kv_len)

    def gain_into_datagram(self, gain: GainPtr) -> DatagramPtr:
        return self.dll.AUTDGainIntoDatagram(gain)

    def gain_calc(self, gain: GainPtr, geometry: GeometryPtr) -> ResultGainCalcDrivesMap:
        return self.dll.AUTDGainCalc(gain, geometry)

    def gain_calc_get_result(self, src: GainCalcDrivesMapPtr, dst: ctypes.Array | None, idx: int) -> None:
        return self.dll.AUTDGainCalcGetResult(src, dst, idx)

    def gain_calc_free_result(self, src: GainCalcDrivesMapPtr) -> None:
        return self.dll.AUTDGainCalcFreeResult(src)

    def gain_null(self) -> GainPtr:
        return self.dll.AUTDGainNull()

    def gain_plane(self, nx: float, ny: float, nz: float) -> GainPtr:
        return self.dll.AUTDGainPlane(nx, ny, nz)

    def gain_plane_with_intensity(self, plane: GainPtr, intensity: int) -> GainPtr:
        return self.dll.AUTDGainPlaneWithIntensity(plane, intensity)

    def gain_transducer_test(self, f: ctypes.c_void_p | None, context: ContextPtr, geometry: GeometryPtr) -> GainPtr:
        return self.dll.AUTDGainTransducerTest(f, context, geometry)

    def gain_uniform(self, intensity: int) -> GainPtr:
        return self.dll.AUTDGainUniform(intensity)

    def gain_uniform_with_phase(self, uniform: GainPtr, phase: int) -> GainPtr:
        return self.dll.AUTDGainUniformWithPhase(uniform, phase)

    def device(self, geo: GeometryPtr, dev_idx: int) -> DevicePtr:
        return self.dll.AUTDDevice(geo, dev_idx)

    def device_num_transducers(self, dev: DevicePtr) -> ctypes.c_uint32:
        return self.dll.AUTDDeviceNumTransducers(dev)

    def device_get_sound_speed(self, dev: DevicePtr) -> ctypes.c_double:
        return self.dll.AUTDDeviceGetSoundSpeed(dev)

    def device_set_sound_speed(self, dev: DevicePtr, value: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeed(dev, value)

    def device_set_sound_speed_from_temp(self, dev: DevicePtr, temp: float, k: float, r: float, m: float) -> None:
        return self.dll.AUTDDeviceSetSoundSpeedFromTemp(dev, temp, k, r, m)

    def device_get_attenuation(self, dev: DevicePtr) -> ctypes.c_double:
        return self.dll.AUTDDeviceGetAttenuation(dev)

    def device_set_attenuation(self, dev: DevicePtr, value: float) -> None:
        return self.dll.AUTDDeviceSetAttenuation(dev, value)

    def device_center(self, dev: DevicePtr, center: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDDeviceCenter(dev, center)

    def device_translate(self, dev: DevicePtr, x: float, y: float, z: float) -> None:
        return self.dll.AUTDDeviceTranslate(dev, x, y, z)

    def device_rotate(self, dev: DevicePtr, w: float, i: float, j: float, k: float) -> None:
        return self.dll.AUTDDeviceRotate(dev, w, i, j, k)

    def device_affine(self, dev: DevicePtr, x: float, y: float, z: float, w: float, i: float, j: float, k: float) -> None:
        return self.dll.AUTDDeviceAffine(dev, x, y, z, w, i, j, k)

    def device_enable_set(self, dev: DevicePtr, value: bool) -> None:
        return self.dll.AUTDDeviceEnableSet(dev, value)

    def device_enable_get(self, dev: DevicePtr) -> ctypes.c_bool:
        return self.dll.AUTDDeviceEnableGet(dev)

    def geometry(self, cnt: ControllerPtr) -> GeometryPtr:
        return self.dll.AUTDGeometry(cnt)

    def geometry_num_devices(self, geo: GeometryPtr) -> ctypes.c_uint32:
        return self.dll.AUTDGeometryNumDevices(geo)

    def rotation_from_euler_zyz(self, x: float, y: float, z: float, rot: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDRotationFromEulerZYZ(x, y, z, rot)

    def transducer(self, dev: DevicePtr, idx: int) -> TransducerPtr:
        return self.dll.AUTDTransducer(dev, idx)

    def transducer_position(self, tr: TransducerPtr, pos: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerPosition(tr, pos)

    def transducer_rotation(self, tr: TransducerPtr, rot: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerRotation(tr, rot)

    def transducer_direction_x(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionX(tr, dir)

    def transducer_direction_y(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionY(tr, dir)

    def transducer_direction_z(self, tr: TransducerPtr, dir: ctypes.Array[ctypes.c_double] | None) -> None:
        return self.dll.AUTDTransducerDirectionZ(tr, dir)

    def transducer_wavelength(self, tr: TransducerPtr, sound_speed: float) -> ctypes.c_double:
        return self.dll.AUTDTransducerWavelength(tr, sound_speed)

    def controller_builder(self) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilder()

    def controller_builder_add_device(self, builder: ControllerBuilderPtr, x: float, y: float, z: float, qw: float, qx: float, qy: float, qz: float) -> ControllerBuilderPtr:
        return self.dll.AUTDControllerBuilderAddDevice(builder, x, y, z, qw, qx, qy, qz)

    def controller_open_with(self, builder: ControllerBuilderPtr, link_builder: LinkBuilderPtr) -> ResultController:
        return self.dll.AUTDControllerOpenWith(builder, link_builder)

    def controller_close(self, cnt: ControllerPtr) -> ResultI32:
        return self.dll.AUTDControllerClose(cnt)

    def controller_delete(self, cnt: ControllerPtr) -> None:
        return self.dll.AUTDControllerDelete(cnt)

    def controller_fpga_info(self, cnt: ControllerPtr, out: ctypes.Array[ctypes.c_uint8] | None) -> ResultI32:
        return self.dll.AUTDControllerFPGAInfo(cnt, out)

    def controller_firmware_info_list_pointer(self, cnt: ControllerPtr) -> ResultFirmwareInfoList:
        return self.dll.AUTDControllerFirmwareInfoListPointer(cnt)

    def controller_firmware_info_get(self, p_info_list: FirmwareInfoListPtr, idx: int, info: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDControllerFirmwareInfoGet(p_info_list, idx, info)

    def controller_firmware_info_list_pointer_delete(self, p_info_list: FirmwareInfoListPtr) -> None:
        return self.dll.AUTDControllerFirmwareInfoListPointerDelete(p_info_list)

    def firmware_latest(self, latest: ctypes.Array[ctypes.c_char] | None) -> None:
        return self.dll.AUTDFirmwareLatest(latest)

    def datagram_synchronize(self) -> DatagramPtr:
        return self.dll.AUTDDatagramSynchronize()

    def datagram_clear(self) -> DatagramPtr:
        return self.dll.AUTDDatagramClear()

    def datagram_configure_mod_delay(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureModDelay(f, context, geometry)

    def datagram_configure_debug_output_idx(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureDebugOutputIdx(f, context, geometry)

    def datagram_configure_force_fan(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureForceFan(f, context, geometry)

    def datagram_configure_reads_fpga_info(self, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None, geometry: GeometryPtr) -> DatagramPtr:
        return self.dll.AUTDDatagramConfigureReadsFPGAInfo(f, context, geometry)

    def datagram_silencer(self, step_intensity: int, step_phase: int) -> ResultDatagram:
        return self.dll.AUTDDatagramSilencer(step_intensity, step_phase)

    def controller_send(self, cnt: ControllerPtr, d1: DatagramPtr, d2: DatagramPtr, timeout_ns: int) -> ResultI32:
        return self.dll.AUTDControllerSend(cnt, d1, d2, timeout_ns)

    def controller_group_create_kv_map(self) -> GroupKVMapPtr:
        return self.dll.AUTDControllerGroupCreateKVMap()

    def controller_group_kv_map_set(self, map: GroupKVMapPtr, key: int, d1: DatagramPtr, d2: DatagramPtr, timeout_ns: int) -> ResultGroupKVMap:
        return self.dll.AUTDControllerGroupKVMapSet(map, key, d1, d2, timeout_ns)

    def controller_group(self, cnt: ControllerPtr, map: ctypes.Array[ctypes.c_int32] | None, kv_map: GroupKVMapPtr) -> ResultI32:
        return self.dll.AUTDControllerGroup(cnt, map, kv_map)

    def link_audit(self) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAudit()

    def link_audit_with_timeout(self, audit: LinkAuditBuilderPtr, timeout_ns: int) -> LinkAuditBuilderPtr:
        return self.dll.AUTDLinkAuditWithTimeout(audit, timeout_ns)

    def link_audit_into_builder(self, audit: LinkAuditBuilderPtr) -> LinkBuilderPtr:
        return self.dll.AUTDLinkAuditIntoBuilder(audit)

    def link_audit_is_open(self, audit: LinkPtr) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditIsOpen(audit)

    def link_audit_timeout_ns(self, audit: LinkPtr) -> ctypes.c_uint64:
        return self.dll.AUTDLinkAuditTimeoutNs(audit)

    def link_audit_last_timeout_ns(self, audit: LinkPtr) -> ctypes.c_uint64:
        return self.dll.AUTDLinkAuditLastTimeoutNs(audit)

    def link_audit_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditDown(audit)

    def link_audit_up(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditUp(audit)

    def link_audit_break_down(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditBreakDown(audit)

    def link_audit_repair(self, audit: LinkPtr) -> None:
        return self.dll.AUTDLinkAuditRepair(audit)

    def link_audit_cpu_update(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditCpuUpdate(audit, idx)

    def link_audit_cpu_idx(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditCpuIdx(audit, idx)

    def link_audit_cpu_num_transducers(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditCpuNumTransducers(audit, idx)

    def link_audit_cpu_ack(self, audit: LinkPtr, idx: int) -> ctypes.c_uint8:
        return self.dll.AUTDLinkAuditCpuAck(audit, idx)

    def link_audit_cpu_rx_data(self, audit: LinkPtr, idx: int) -> ctypes.c_uint8:
        return self.dll.AUTDLinkAuditCpuRxData(audit, idx)

    def link_audit_fpga_assert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaAssertThermalSensor(audit, idx)

    def link_audit_fpga_deassert_thermal_sensor(self, audit: LinkPtr, idx: int) -> None:
        return self.dll.AUTDLinkAuditFpgaDeassertThermalSensor(audit, idx)

    def link_audit_fpga_is_force_fan(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsForceFan(audit, idx)

    def link_audit_fpga_is_stm_mode(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsStmMode(audit, idx)

    def link_audit_fpga_is_stm_gain_mode(self, audit: LinkPtr, idx: int) -> ctypes.c_bool:
        return self.dll.AUTDLinkAuditFpgaIsStmGainMode(audit, idx)

    def link_audit_fpga_silencer_step_intensity(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerStepIntensity(audit, idx)

    def link_audit_fpga_silencer_step_phase(self, audit: LinkPtr, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDLinkAuditFpgaSilencerStepPhase(audit, idx)

    def link_audit_fpga_debug_output_idx(self, audit: LinkPtr, idx: int) -> ctypes.c_uint8:
        return self.dll.AUTDLinkAuditFpgaDebugOutputIdx(audit, idx)

    def link_audit_fpga_mod_delays(self, audit: LinkPtr, idx: int, delay: ctypes.Array[ctypes.c_uint16] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaModDelays(audit, idx, delay)

    def link_audit_fpga_stm_frequency_division(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaStmFrequencyDivision(audit, idx)

    def link_audit_fpga_stm_cycle(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaStmCycle(audit, idx)

    def link_audit_fpga_sound_speed(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaSoundSpeed(audit, idx)

    def link_audit_fpga_stm_start_idx(self, audit: LinkPtr, idx: int) -> ctypes.c_int32:
        return self.dll.AUTDLinkAuditFpgaStmStartIdx(audit, idx)

    def link_audit_fpga_stm_finish_idx(self, audit: LinkPtr, idx: int) -> ctypes.c_int32:
        return self.dll.AUTDLinkAuditFpgaStmFinishIdx(audit, idx)

    def link_audit_fpga_modulation_frequency_division(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaModulationFrequencyDivision(audit, idx)

    def link_audit_fpga_modulation_cycle(self, audit: LinkPtr, idx: int) -> ctypes.c_uint32:
        return self.dll.AUTDLinkAuditFpgaModulationCycle(audit, idx)

    def link_audit_fpga_modulation(self, audit: LinkPtr, idx: int, data: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaModulation(audit, idx, data)

    def link_audit_fpga_intensities_and_phases(self, audit: LinkPtr, idx: int, stm_idx: int, intensities: ctypes.Array[ctypes.c_uint8] | None, phases: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDLinkAuditFpgaIntensitiesAndPhases(audit, idx, stm_idx, intensities, phases)

    def link_get(self, cnt: ControllerPtr) -> LinkPtr:
        return self.dll.AUTDLinkGet(cnt)

    def link_nop(self) -> LinkBuilderPtr:
        return self.dll.AUTDLinkNop()

    def modulation_with_cache(self, m: ModulationPtr) -> ResultCache:
        return self.dll.AUTDModulationWithCache(m)

    def modulation_cache_get_buffer_len(self, m: CachePtr) -> ctypes.c_uint32:
        return self.dll.AUTDModulationCacheGetBufferLen(m)

    def modulation_cache_get_buffer(self, m: CachePtr, buf: ctypes.Array[ctypes.c_uint8] | None) -> None:
        return self.dll.AUTDModulationCacheGetBuffer(m, buf)

    def modulation_cache_into_modulation(self, m: CachePtr) -> ModulationPtr:
        return self.dll.AUTDModulationCacheIntoModulation(m)

    def modulation_cache_delete(self, m: CachePtr) -> None:
        return self.dll.AUTDModulationCacheDelete(m)

    def modulation_custom(self, config: SamplingConfiguration, ptr: ctypes.Array[ctypes.c_uint8] | None, len: int) -> ModulationPtr:
        return self.dll.AUTDModulationCustom(config, ptr, len)

    def modulation_fourier(self, m: ModulationPtr) -> ModulationPtr:
        return self.dll.AUTDModulationFourier(m)

    def modulation_fourier_add_component(self, fourier: ModulationPtr, m: ModulationPtr) -> ModulationPtr:
        return self.dll.AUTDModulationFourierAddComponent(fourier, m)

    def modulation_sampling_config(self, m: ModulationPtr) -> SamplingConfiguration:
        return self.dll.AUTDModulationSamplingConfig(m)

    def modulation_into_datagram(self, m: ModulationPtr) -> DatagramPtr:
        return self.dll.AUTDModulationIntoDatagram(m)

    def modulation_size(self, m: ModulationPtr) -> ResultI32:
        return self.dll.AUTDModulationSize(m)

    def modulation_with_radiation_pressure(self, m: ModulationPtr) -> ModulationPtr:
        return self.dll.AUTDModulationWithRadiationPressure(m)

    def modulation_sine(self, freq: float) -> ModulationPtr:
        return self.dll.AUTDModulationSine(freq)

    def modulation_sine_with_sampling_config(self, m: ModulationPtr, config: SamplingConfiguration) -> ModulationPtr:
        return self.dll.AUTDModulationSineWithSamplingConfig(m, config)

    def modulation_sine_with_intensity(self, m: ModulationPtr, intensity: int) -> ModulationPtr:
        return self.dll.AUTDModulationSineWithIntensity(m, intensity)

    def modulation_sine_with_phase(self, m: ModulationPtr, phase: float) -> ModulationPtr:
        return self.dll.AUTDModulationSineWithPhase(m, phase)

    def modulation_sine_with_offset(self, m: ModulationPtr, offset: int) -> ModulationPtr:
        return self.dll.AUTDModulationSineWithOffset(m, offset)

    def modulation_sine_with_mode(self, m: ModulationPtr, mode: SamplingMode) -> ModulationPtr:
        return self.dll.AUTDModulationSineWithMode(m, mode)

    def modulation_square(self, freq: float) -> ModulationPtr:
        return self.dll.AUTDModulationSquare(freq)

    def modulation_square_with_low(self, m: ModulationPtr, low: int) -> ModulationPtr:
        return self.dll.AUTDModulationSquareWithLow(m, low)

    def modulation_square_with_high(self, m: ModulationPtr, high: int) -> ModulationPtr:
        return self.dll.AUTDModulationSquareWithHigh(m, high)

    def modulation_square_with_duty(self, m: ModulationPtr, duty: float) -> ModulationPtr:
        return self.dll.AUTDModulationSquareWithDuty(m, duty)

    def modulation_square_with_sampling_config(self, m: ModulationPtr, config: SamplingConfiguration) -> ModulationPtr:
        return self.dll.AUTDModulationSquareWithSamplingConfig(m, config)

    def modulation_square_with_mode(self, m: ModulationPtr, mode: SamplingMode) -> ModulationPtr:
        return self.dll.AUTDModulationSquareWithMode(m, mode)

    def modulation_static(self) -> ModulationPtr:
        return self.dll.AUTDModulationStatic()

    def modulation_static_with_intensity(self, m: ModulationPtr, intensity: int) -> ModulationPtr:
        return self.dll.AUTDModulationStaticWithIntensity(m, intensity)

    def modulation_with_transform(self, m: ModulationPtr, f: ctypes.c_void_p | None, context: ctypes.c_void_p | None) -> ModulationPtr:
        return self.dll.AUTDModulationWithTransform(m, f, context)

    def stm_focus(self, props: STMPropsPtr, points: ctypes.Array[ctypes.c_double] | None, intensities: ctypes.Array[ctypes.c_uint8] | None, size: int) -> ResultDatagram:
        return self.dll.AUTDSTMFocus(props, points, intensities, size)

    def stm_gain(self, props: STMPropsPtr, gains: ctypes.Array | None, size: int, mode: GainSTMMode) -> ResultDatagram:
        return self.dll.AUTDSTMGain(props, gains, size, mode)

    def stm_gain_add_gain(self, stm: DatagramPtr, gain: GainPtr) -> ResultDatagram:
        return self.dll.AUTDSTMGainAddGain(stm, gain)

    def stm_props_new(self, freq: float) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsNew(freq)

    def stm_props_from_period(self, p: int) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsFromPeriod(p)

    def stm_props_from_sampling_config(self, config: SamplingConfiguration) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsFromSamplingConfig(config)

    def stm_props_with_start_idx(self, props: STMPropsPtr, idx: int) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsWithStartIdx(props, idx)

    def stm_props_with_finish_idx(self, props: STMPropsPtr, idx: int) -> STMPropsPtr:
        return self.dll.AUTDSTMPropsWithFinishIdx(props, idx)

    def stm_props_frequency(self, props: STMPropsPtr, size: int) -> ctypes.c_double:
        return self.dll.AUTDSTMPropsFrequency(props, size)

    def stm_props_period(self, props: STMPropsPtr, size: int) -> ctypes.c_uint64:
        return self.dll.AUTDSTMPropsPeriod(props, size)

    def stm_props_sampling_config(self, props: STMPropsPtr, size: int) -> ResultSamplingConfig:
        return self.dll.AUTDSTMPropsSamplingConfig(props, size)

    def stm_props_start_idx(self, props: STMPropsPtr) -> ctypes.c_int32:
        return self.dll.AUTDSTMPropsStartIdx(props)

    def stm_props_finish_idx(self, props: STMPropsPtr) -> ctypes.c_int32:
        return self.dll.AUTDSTMPropsFinishIdx(props)
