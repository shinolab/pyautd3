# This file is autogenerated
import threading
import ctypes
import os
from pyautd3.native_methods.autd3capi_def import GeometryPtr, LinkBuilderPtr, LinkPtr, ResultI32

from enum import IntEnum

class Backend(IntEnum):
    Plotters = 0
    Python = 1
    Null = 2

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class Directivity(IntEnum):
    Sphere = 0
    T4010A1 = 1

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class CMap(IntEnum):
    Jet = 0
    Viridis = 1
    Magma = 2
    Inferno = 3
    Plasma = 4
    Cividis = 5
    Turbo = 6
    Circle = 7
    Bluered = 8
    Breeze = 9
    Mist = 10
    Earth = 11
    Hell = 12

    @classmethod
    def from_param(cls, obj):
        return int(obj)


class ConfigPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class PlotRangePtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class NullPlotConfigPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class PlotConfigPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class PyPlotConfigPtr(ctypes.Structure):
    _fields_ = [("_0", ctypes.c_void_p)]


class ResultPlotConfig(ctypes.Structure):
    _fields_ = [("result", PlotConfigPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class ResultPyPlotConfig(ctypes.Structure):
    _fields_ = [("result", PyPlotConfigPtr), ("err_len", ctypes.c_uint32), ("err", ctypes.c_void_p)]


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_link_visualizer{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDLinkVisualizerPlotRange.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDLinkVisualizerPlotRange.restype = PlotRangePtr

        self.dll.AUTDLinkVisualizerPhasesOf.argtypes = [LinkPtr, Backend, Directivity, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkVisualizerPhasesOf.restype = ctypes.c_uint32

        self.dll.AUTDLinkVisualizerIntensitiesOf.argtypes = [LinkPtr, Backend, Directivity, ctypes.c_uint32, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkVisualizerIntensitiesOf.restype = ctypes.c_uint32

        self.dll.AUTDLinkVisualizerModulation.argtypes = [LinkPtr, Backend, Directivity, ctypes.POINTER(ctypes.c_uint8)]  # type: ignore 
        self.dll.AUTDLinkVisualizerModulation.restype = ctypes.c_uint32

        self.dll.AUTDLinkVisualizerCalcFieldOf.argtypes = [LinkPtr, Backend, Directivity, ctypes.POINTER(ctypes.c_double), ctypes.c_uint32, GeometryPtr, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double)]  # type: ignore 
        self.dll.AUTDLinkVisualizerCalcFieldOf.restype = ResultI32

        self.dll.AUTDLinkVisualizerPlotFieldOf.argtypes = [LinkPtr, Backend, Directivity, ConfigPtr, PlotRangePtr, GeometryPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotFieldOf.restype = ResultI32

        self.dll.AUTDLinkVisualizerPlotPhaseOf.argtypes = [LinkPtr, Backend, Directivity, ConfigPtr, GeometryPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotPhaseOf.restype = ResultI32

        self.dll.AUTDLinkVisualizerPlotModulation.argtypes = [LinkPtr, Backend, Directivity, ConfigPtr]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotModulation.restype = ResultI32

        self.dll.AUTDLinkVisualizerSphereNull.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerSphereNull.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerT4010A1Null.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerT4010A1Null.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerNullPlotConfigDefault.argtypes = [] 
        self.dll.AUTDLinkVisualizerNullPlotConfigDefault.restype = NullPlotConfigPtr

        self.dll.AUTDLinkVisualizerSpherePlotters.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerSpherePlotters.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerT4010A1Plotters.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerT4010A1Plotters.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerPlotConfigDefault.argtypes = [] 
        self.dll.AUTDLinkVisualizerPlotConfigDefault.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithFigSize.argtypes = [PlotConfigPtr, ctypes.c_uint32, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithFigSize.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithCBarSize.argtypes = [PlotConfigPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithCBarSize.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithFontSize.argtypes = [PlotConfigPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithFontSize.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithLabelAreaSize.argtypes = [PlotConfigPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithLabelAreaSize.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithMargin.argtypes = [PlotConfigPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithMargin.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithTicksStep.argtypes = [PlotConfigPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithTicksStep.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithCMap.argtypes = [PlotConfigPtr, CMap]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithCMap.restype = PlotConfigPtr

        self.dll.AUTDLinkVisualizerPlotConfigWithFName.argtypes = [PlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPlotConfigWithFName.restype = ResultPlotConfig

        self.dll.AUTDLinkVisualizerSpherePython.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerSpherePython.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerT4010A1Python.argtypes = [ctypes.c_bool, ctypes.c_int32] 
        self.dll.AUTDLinkVisualizerT4010A1Python.restype = LinkBuilderPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigDefault.argtypes = [] 
        self.dll.AUTDLinkVisualizerPyPlotConfigDefault.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithFigSize.argtypes = [PyPlotConfigPtr, ctypes.c_int32, ctypes.c_int32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithFigSize.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithDPI.argtypes = [PyPlotConfigPtr, ctypes.c_int32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithDPI.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPosition.argtypes = [PyPlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPosition.restype = ResultPyPlotConfig

        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarSize.argtypes = [PyPlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarSize.restype = ResultPyPlotConfig

        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPad.argtypes = [PyPlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPad.restype = ResultPyPlotConfig

        self.dll.AUTDLinkVisualizerPyPlotConfigWithFontSize.argtypes = [PyPlotConfigPtr, ctypes.c_int32]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithFontSize.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithTicksStep.argtypes = [PyPlotConfigPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithTicksStep.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithCMap.argtypes = [PyPlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithCMap.restype = ResultPyPlotConfig

        self.dll.AUTDLinkVisualizerPyPlotConfigWithShow.argtypes = [PyPlotConfigPtr, ctypes.c_bool]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithShow.restype = PyPlotConfigPtr

        self.dll.AUTDLinkVisualizerPyPlotConfigWithFName.argtypes = [PyPlotConfigPtr, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkVisualizerPyPlotConfigWithFName.restype = ResultPyPlotConfig

    def link_visualizer_plot_range(self, x_min: float, x_max: float, y_min: float, y_max: float, z_min: float, z_max: float, resolution: float) -> PlotRangePtr:
        return self.dll.AUTDLinkVisualizerPlotRange(x_min, x_max, y_min, y_max, z_min, z_max, resolution)

    def link_visualizer_phases_of(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, idx: int, buf: ctypes.Array[ctypes.c_uint8] | None) -> ctypes.c_uint32:
        return self.dll.AUTDLinkVisualizerPhasesOf(visualizer, backend, directivity, idx, buf)

    def link_visualizer_intensities_of(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, idx: int, buf: ctypes.Array[ctypes.c_uint8] | None) -> ctypes.c_uint32:
        return self.dll.AUTDLinkVisualizerIntensitiesOf(visualizer, backend, directivity, idx, buf)

    def link_visualizer_modulation(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, buf: ctypes.Array[ctypes.c_uint8] | None) -> ctypes.c_uint32:
        return self.dll.AUTDLinkVisualizerModulation(visualizer, backend, directivity, buf)

    def link_visualizer_calc_field_of(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, points: ctypes.Array[ctypes.c_double] | None, points_len: int, geometry: GeometryPtr, idx: int, buf: ctypes.Array[ctypes.c_double] | None) -> ResultI32:
        return self.dll.AUTDLinkVisualizerCalcFieldOf(visualizer, backend, directivity, points, points_len, geometry, idx, buf)

    def link_visualizer_plot_field_of(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, config: ConfigPtr, range: PlotRangePtr, geometry: GeometryPtr, idx: int) -> ResultI32:
        return self.dll.AUTDLinkVisualizerPlotFieldOf(visualizer, backend, directivity, config, range, geometry, idx)

    def link_visualizer_plot_phase_of(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, config: ConfigPtr, geometry: GeometryPtr, idx: int) -> ResultI32:
        return self.dll.AUTDLinkVisualizerPlotPhaseOf(visualizer, backend, directivity, config, geometry, idx)

    def link_visualizer_plot_modulation(self, visualizer: LinkPtr, backend: Backend, directivity: Directivity, config: ConfigPtr) -> ResultI32:
        return self.dll.AUTDLinkVisualizerPlotModulation(visualizer, backend, directivity, config)

    def link_visualizer_sphere_null(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerSphereNull(use_gpu, gpu_idx)

    def link_visualizer_t_4010_a_1_null(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerT4010A1Null(use_gpu, gpu_idx)

    def link_visualizer_null_plot_config_default(self) -> NullPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerNullPlotConfigDefault()

    def link_visualizer_sphere_plotters(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerSpherePlotters(use_gpu, gpu_idx)

    def link_visualizer_t_4010_a_1_plotters(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerT4010A1Plotters(use_gpu, gpu_idx)

    def link_visualizer_plot_config_default(self) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigDefault()

    def link_visualizer_plot_config_with_fig_size(self, config: PlotConfigPtr, width: int, height: int) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithFigSize(config, width, height)

    def link_visualizer_plot_config_with_c_bar_size(self, config: PlotConfigPtr, cbar_size: float) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithCBarSize(config, cbar_size)

    def link_visualizer_plot_config_with_font_size(self, config: PlotConfigPtr, font_size: int) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithFontSize(config, font_size)

    def link_visualizer_plot_config_with_label_area_size(self, config: PlotConfigPtr, label_area_size: int) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithLabelAreaSize(config, label_area_size)

    def link_visualizer_plot_config_with_margin(self, config: PlotConfigPtr, margin: int) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithMargin(config, margin)

    def link_visualizer_plot_config_with_ticks_step(self, config: PlotConfigPtr, ticks_step: float) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithTicksStep(config, ticks_step)

    def link_visualizer_plot_config_with_c_map(self, config: PlotConfigPtr, cmap: CMap) -> PlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPlotConfigWithCMap(config, cmap)

    def link_visualizer_plot_config_with_f_name(self, config: PlotConfigPtr, fname: bytes) -> ResultPlotConfig:
        return self.dll.AUTDLinkVisualizerPlotConfigWithFName(config, fname)

    def link_visualizer_sphere_python(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerSpherePython(use_gpu, gpu_idx)

    def link_visualizer_t_4010_a_1_python(self, use_gpu: bool, gpu_idx: int) -> LinkBuilderPtr:
        return self.dll.AUTDLinkVisualizerT4010A1Python(use_gpu, gpu_idx)

    def link_visualizer_py_plot_config_default(self) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigDefault()

    def link_visualizer_py_plot_config_with_fig_size(self, config: PyPlotConfigPtr, width: int, height: int) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithFigSize(config, width, height)

    def link_visualizer_py_plot_config_with_dpi(self, config: PyPlotConfigPtr, dpi: int) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithDPI(config, dpi)

    def link_visualizer_py_plot_config_with_c_bar_position(self, config: PyPlotConfigPtr, cbar_position: bytes) -> ResultPyPlotConfig:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPosition(config, cbar_position)

    def link_visualizer_py_plot_config_with_c_bar_size(self, config: PyPlotConfigPtr, cbar_size: bytes) -> ResultPyPlotConfig:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarSize(config, cbar_size)

    def link_visualizer_py_plot_config_with_c_bar_pad(self, config: PyPlotConfigPtr, cbar_pad: bytes) -> ResultPyPlotConfig:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithCBarPad(config, cbar_pad)

    def link_visualizer_py_plot_config_with_font_size(self, config: PyPlotConfigPtr, fontsize: int) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithFontSize(config, fontsize)

    def link_visualizer_py_plot_config_with_ticks_step(self, config: PyPlotConfigPtr, ticks_step: float) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithTicksStep(config, ticks_step)

    def link_visualizer_py_plot_config_with_c_map(self, config: PyPlotConfigPtr, cmap: bytes) -> ResultPyPlotConfig:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithCMap(config, cmap)

    def link_visualizer_py_plot_config_with_show(self, config: PyPlotConfigPtr, show: bool) -> PyPlotConfigPtr:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithShow(config, show)

    def link_visualizer_py_plot_config_with_f_name(self, config: PyPlotConfigPtr, fname: bytes) -> ResultPyPlotConfig:
        return self.dll.AUTDLinkVisualizerPyPlotConfigWithFName(config, fname)
