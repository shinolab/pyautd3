from typing import Self
from pyautd3.native_methods.autd3capi import NativeMethods as Base
from pyautd3.native_methods.autd3capi_driver import SpinStrategyTag as SpinStrategy
from pyautd3.native_methods.autd3capi_driver import TimerStrategyWrap
from pyautd3.native_methods.utils import ConstantADT



class StdSleeper():
    def __init__(self, ) -> None: ...
    @property
    def timer_resolution(self) -> int | None: ...

class SpinSleeper():
    def __init__(self, native_accuracy_ns: int | None = None) -> None: ...
    def with_spin_strategy(self, spin_strategy: SpinStrategy) -> SpinSleeper: ...
    @property
    def native_accuracy_ns(self) -> int: ...
    @property
    def spin_strategy(self) -> SpinStrategy: ...

class AsyncSleeper():
    def __init__(self, ) -> None: ...
    @property
    def timer_resolution(self) -> int | None: ...

class WaitableSleeper():
    def __init__(self, ) -> None: ...

class TimerStrategy():
    def __new__(self, ) -> TimerStrategy: ...
    @staticmethod
    def Std(sleeper: StdSleeper) -> TimerStrategyWrap: ...
    @staticmethod
    def Spin(sleeper: SpinSleeper) -> TimerStrategyWrap: ...
    @staticmethod
    def Async(sleeper: AsyncSleeper) -> TimerStrategyWrap: ...
    @staticmethod
    def Waitable(_sleeper: WaitableSleeper) -> TimerStrategyWrap: ...
