[config]
default_to_workspace = false
skip_core_tasks = true

[tasks.format]
command = "uv"
args = ["run", "ruff", "format", "."]

[tasks.clean]
dependencies = ["clean-pycache"]
ignore_errors = true
script_runner = "@shell"
script = '''
rm ./setup.cfg
rm ./.coverage
rm LICENSE
rm ThirdPartyNotice.txt
rm VERSION
rm -rf dist
rm -rf pyautd3.egg-info
rm -rf pyautd3/bin
rm pyautd3/LICENSE.txt
rm pyautd3/ThirdPartyNotice.txt
rm -rf htmlcov
rm -rf .ruff_cache
rm -rf .mypy_cache
rm -rf .pytest_cache
'''

[tasks.clean-pycache]
ignore_errors = true
script_runner = "python"
script_extension = "py"
script = '''
from pathlib import Path

for p in Path('.').rglob('*.py[co]'):
    p.unlink()
for p in Path('.').rglob('__pycache__'):
    p.rmdir()
'''

[tasks.sync]
command = "uv"
args = ["sync", "--all-extras", "--dev"]

[tasks.mypy]
command = "uv"
args = ["run", "mypy", ".", "--check-untyped-defs"]

[tasks.ruff]
command = "uv"
args = ["run", "ruff", "check", "."]

[tasks.check]
dependencies = ["sync", "format", "mypy", "ruff", "test", "build"]

[tasks.test]
dependencies = ["update-bin"]
command = "uv"
args = ["run", "pytest", "-n", "auto", "${@}"]

[tasks.build]
dependencies = ["sync", "build-setup", "update-bin", "build-wheel"]

[tasks.build-wheel]
command = "uv"
args = ["build"]

[tasks.build-setup]
run_task = [
    { name = "build-setup-win-x64", condition = { platforms = [
        "windows",
    ] } },
    { name = "build-setup-linux-x64", condition = { platforms = [
        "linux",
    ] } },
    { name = "build-setup-macos-arm64", condition = { platforms = [
        "mac",
    ] } },
]

[tasks.build-setup-win-x64]
script_runner = "python"
script_extension = "py"
script = '''
import re
from pathlib import Path

src = Path("setup.cfg.template")
content = src.read_text(encoding="utf-8")
content = re.sub("PLATNAME", "win-amd64", content, flags=re.MULTILINE)
dst = Path("setup.cfg")
dst.write_text(content, encoding="utf-8")
'''

[tasks.build-setup-linux-x64]
script_runner = "python"
script_extension = "py"
script = '''
import re
from pathlib import Path

src = Path("setup.cfg.template")
content = src.read_text(encoding="utf-8")
content = re.sub("PLATNAME", "manylinux1_x86_64", content, flags=re.MULTILINE)
dst = Path("setup.cfg")
dst.write_text(content, encoding="utf-8")
'''

[tasks.build-setup-macos-arm64]
script_runner = "python"
script_extension = "py"
script = '''
import re
from pathlib import Path

src = Path("setup.cfg.template")
content = src.read_text(encoding="utf-8")
content = re.sub("PLATNAME", "macosx-11-0-arm64", content, flags=re.MULTILINE)
dst = Path("setup.cfg")
dst.write_text(content, encoding="utf-8")
'''

[tasks.cov]
command = "uv"
args = ["run", "pytest", "-n", "auto", "--cov-config=.coveragerc", "--cov=pyautd3", "--cov-branch", "--cov-report=${@}"]
dependencies = ["sync", "update-bin"]

[tasks.generate-wrapper]
dependencies = ["generate-wrapper-pre", "generate-wrapper-main", "format", "generate-wrapper-post"]

[tasks.generate-wrapper-pre]
command = "git"
args = ["submodule", "update", "--init"]

[tasks.generate-wrapper-main]
cwd = "./tools/wrapper-generator"
command = "cargo"
args = ["r", "--release"]

[tasks.generate-wrapper-post]
command = "uv"
args = ["run", "ruff", "check", "pyautd3/native_methods", "--fix"]

[tasks.update-bin]
script_runner = "python"
script_extension = "py"
script = '''
import platform
import re
import shutil
import sys
import tarfile
import urllib.request
import contextlib
from pathlib import Path


def download_and_extract(repo: str, name: str, version: str) -> None:
    url: str
    base_url = f"https://github.com/shinolab/{repo}/releases/download/v{version}/{name}-v{version}"
    if platform.system() == "Windows":
        url = f"{base_url}-win-x64.zip"
    elif platform.system() == "Darwin":
        url = f"{base_url}-macos-aarch64.tar.gz"
    else:
        url = f"{base_url}-linux-x64.tar.gz"

    tmp_file = Path("tmp.zip" if url.endswith(".zip") else "tmp.tar.gz")
    urllib.request.urlretrieve(url, tmp_file)  # noqa: S310
    if tmp_file.suffix == ".zip":
        shutil.unpack_archive(tmp_file, ".")
    else:
        with tarfile.open(tmp_file, "r:gz") as tar:
            tar.extractall(filter="fully_trusted")  # noqa: S202
    tmp_file.unlink()

    dst_dir = Path("pyautd3/bin")
    dst_dir.mkdir(parents=True, exist_ok=True)

    for dll in Path("bin").glob("*.dll"):
        shutil.copy(dll, dst_dir)
    for dylib in Path("bin").glob("*.dylib"):
        shutil.copy(dylib, dst_dir)
    for so in Path("bin").glob("*.so"):
        shutil.copy(so, dst_dir)
    shutil.rmtree("bin")
    with contextlib.suppress(FileNotFoundError):
        shutil.rmtree("lib")


def should_update_dll(version: str) -> bool:
    if platform.system() == "Windows":
        if not Path("pyautd3/bin/autd3capi.dll").exists():
            return True
    elif platform.system() == "Darwin":
        if not Path("pyautd3/bin/libautd3capi.dylib").exists():
            return True
    elif not Path("pyautd3/bin/libautd3capi.so").exists():
        return True

    version_file = Path("VERSION")
    if not version_file.exists():
        return True

    old_version = version_file.read_text().strip()
    return old_version != version


with Path("pyautd3/__init__.py").open() as f:
    content = f.read()
    version = re.search(r'__version__ = "(.*)"', content).group(1).split(".")  # type: ignore[union-attr]
    if "rc" in version[2] or "alpha" in version[2] or "beta" in version[2]:
        match = re.search(r"(\d+)(rc|alpha|beta)(\d+)", version[2])
        patch_version = match.group(1)  # type: ignore[union-attr]
        pre = match.group(2)  # type: ignore[union-attr]
        pre_version = match.group(3)  # type: ignore[union-attr]
        version = f"{version[0]}.{version[1]}.{patch_version}-{pre}.{pre_version}"
    else:
        version = ".".join(version[:3])

if not should_update_dll(version):
    sys.exit(0)

download_and_extract("autd3-capi", "autd3", version)
shutil.copyfile("LICENSE", "pyautd3/LICENSE.txt")
shutil.copyfile("ThirdPartyNotice.txt", "pyautd3/ThirdPartyNotice.txt")

Path("VERSION").write_text(version)
'''

[tasks.update-version]
script_runner = "python"
script_extension = "py"
script = '''
import sys
import re
from pathlib import Path

version = sys.argv[1]

def substitute_in_file(file: str, pattern: str, repl: str) -> None:
    file = Path(file)
    content = file.read_text(encoding="utf-8")
    content = re.sub(pattern, repl, content, flags=re.MULTILINE)
    file.write_text(content, encoding="utf-8")

substitute_in_file("pyautd3/__init__.py", r'__version__ = "(.*)"', f'__version__ = "{version}"')
substitute_in_file("setup.cfg.template", r"version = (.*)", f"version = {version}")
substitute_in_file("pyproject.toml", r'^version = "(.*)"', f'version = "{version}"')
'''
